<?php

 /** 
 * Add Users, Roles, Users Roles & Role Permissions 
 */
function sab_users_roles_import_update_7002(){

    try {

        // Get Users, Roles, Users Roles & Role Permissions from GradSchools 

        db_set_active('gs_db');

        $gs_roles = db_query("SELECT * FROM {role}")->fetchAll();

        $gs_users = db_query("SELECT * FROM {users}")->fetchAll(); 

        foreach ($gs_users as $key => $user) { 

            $query = db_select('users_roles', 'ur'); 
            
            $query->join('role', 'r', 'r.rid = ur.rid') ;
            $query->fields('r', array('name'))
                  ->condition('ur.uid', $user->uid); 

            $gs_user_roles = $query->execute()->fetchAll();
            
            foreach($gs_user_roles as $k => $v)
            {
                $gs_user_roles[$k] = (array) $v;
            }   

            $gs_users[$key]->user_roles = $gs_user_roles ; 
            
        }
        
        foreach ($gs_roles as $key => $role) { 
            
            $query = db_select('role_permission', 'rp'); 
            
            $query->join('role', 'r', 'r.rid = rp.rid') ;
            $query->fields('rp', array('rid', 'permission', 'module'))
                  ->condition('rp.rid', $role->rid); 
            
            $gs_role_perms = $query->execute()->fetchAll();
            
            foreach($gs_role_perms as $k => $v)
            {
                $gs_role_perms[$k] = (array) $v;
            } 
            
            $gs_roles[$key]->role_permissions = $gs_role_perms; 
        }
        
        // Import Users, Roles, Users Roles & Role Permissions to SAB Drupal
        
        db_set_active('default'); 
        
        foreach ($gs_roles as $role) { 
            
            // Check that a role is not already returned.
            if (!user_role_load_by_name($role->name)) {
                $sab_role = new stdClass();  
                
                // Match values to the role Class.
                $sab_role->name = $role->name;
                $sab_role->weight = $role->weight;

                // Save the Role using Drupal's API.
                user_role_save($sab_role);
                
            }
        }
        
        foreach($gs_users as $user) {

            // Check that user is not already returned.
            if(!user_load_by_name( $user->name)){
                
                $new_user_roles = array();

                foreach($user->user_roles as  $user_role){

                    $rid = _sab_get_user_role_id_by_name($user_role['name']); 

                    $new_user_roles[$rid] = TRUE; 
                }
                
                // Create a new user
                $new_user = new stdClass();
                $new_user->name = $user->name;
                $new_user->pass = $user->pass; 
                $new_user->mail = $user->mail;
                $new_user->roles = $new_user_roles;
                $new_user->status = 1; // omit this line to block this user at creation
                $new_user->is_new = TRUE; // not necessary because we already omit $new_user->uid
                
                user_save($new_user);
                
            }
            
            
        }

        // Role Permissions is throwing issues 
        
        //foreach($gs_roles as $gs_role){

        //    $role = user_role_load_by_name($gs_role->name); 
        
        //    if (!empty($role) && $role->rid == 46) {
        
        //        $permissions = array(); 
        
        //        foreach($gs_role->role_permissions as $role_perm){
        //            if(module_exists($role_perm['module'])){ 
        //                $permissions[] = $role_perm['permission']; 
        //            }
        //        }

        //        user_role_grant_permissions($role->rid, $permissions);

        //    }
        //}


        return t("Users, Roles & Permissions have been inserted.");
    }
    catch(Exception $e){
        
        db_set_active();
        dpm($e);
        
        
    }
    
}
 
