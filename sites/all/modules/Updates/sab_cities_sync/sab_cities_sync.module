<?php

/**
 * Implements hook_cron().
 */
function sab_cities_sync_install() {

    //Alters the page settings for the Main listings
    db_update('system')
    ->fields(array(
        'schema_version' => 0,
      )
    )
    ->condition('name', 'sab_cities_sync')
    ->condition('type', 'module')
    ->execute();
    
}


/**
 * Implements hook_cron().
 */
function sab_cities_sync_cron(){

    try{
        $syncedCities = array();  
   
        db_set_active('nexus'); 
     
        $isCityIds = db_query("select CityId from City order by CityId")->fetchCol(); 
    
        db_set_active(); 

        if(!empty($isCityIds)){
            
            $drupalCityIds = db_query("select field_external_id_value  from sab_field_data_field_external_id where entity_type='taxonomy_term' and bundle ='cities' order by field_external_id_value")->fetchCol();
       
            $diff = array_diff($isCityIds, $drupalCityIds);

            $v_query = db_select('taxonomy_vocabulary', 'v');
            $v_query->condition('v.machine_name', 'cities');
            $v_query->fields('v', array('vid'));
            $vid = $v_query->execute()->fetchCol();

            foreach($diff as $key => $value){
    
                //Get the City details for ONLY those to be imported 
                db_set_active('nexus'); 
            
                $query = db_select('City', 'ct');
                $query->join('Country', 'c', 'c.CountryCode = ct.CountryCode');
                $query->fields('ct', array('CityId', 'CityName'));   
                $query->fields('c', array('CountryId'));   
                $query->condition('ct.CityId', $value);
    
                $city = $query->execute()->fetchAll();
          
                db_set_active(); 

                if(!empty($city) && $city[0]->CityId == $value) {
                
                    if(!empty($city[0]->CityName)){

                        $country_term_id = _sab_cities_sync_get_term_id($city[0]->CountryId, 'countries'); 
                        $city_safe_name = sab_listing_create_safe_name($city[0]->CityName); 

                        $term = new stdClass();
                        $term->name = $city[0]->CityName;
                        $term->vid = isset($vid)? $vid[0]: NULL;   
                        $term->field_country_tr[LANGUAGE_NONE][]['tid'] = $country_term_id; 
                        $term->field_external_id[LANGUAGE_NONE][0]['value'] = $city[0]->CityId;
                        $term->field_safe_name[LANGUAGE_NONE][0]['value'] = $city_safe_name;

                        taxonomy_term_save($term);
	
                        $syncedCities[] = array('data' => l($city[0]->CityName . ': ' . $city[0]->CityId, 'term/' .$term->tid));
				
                    }
                    else{
                         
                        watchdog('Syncs', 'City ' . $city[0]->CityId . ' Did not get Synced because it was missing a Name.', null, WATCHDOG_ERROR);
			
                    }
               
                }
                
           
            }
		
            if(!empty($diff)){
                watchdog('Syncs', theme_item_list(array('attributes' => array(), 'type' => 'ol', 'items' => $syncedCities, 'title' => "The following cities have been inserted from IS:")), null, WATCHDOG_INFO);
            }
	
        }else{
             
            watchdog('Syncs', 'A Sync was attempted but the Service returned no results.', null, WATCHDOG_ERROR);
		
        }
        db_set_active();   
    }
    catch(Exception $e){
        dpm($e);
        db_set_active();       
    }

}


/**
 * Get Faceted Search Term
 */
function _sab_cities_sync_get_term_id($id, $bundle) {
	
	$output = "";
    try{
        $query = new EntityFieldQuery();
	    $query = $query
		    ->entityCondition('entity_type', 'taxonomy_term')
		    ->entityCondition('bundle', $bundle)
		    ->fieldCondition('field_external_id', 'value', $id)
		    ->execute();
	
        if (isset($query['taxonomy_term'])) {
        
		    $tids = array_keys($query['taxonomy_term']);
		
            if(!empty($tids)) {
                $output = $tids[0];
            }
	    }
	}
    catch(Exception $e){
        dpm($e);
        db_set_active();       
    }
	return $output;
    
}

 
/**
 * Callback function for Queue().
 */
function _sab_sync_insert_cities($result){
    
    try{
        
        if(!empty($result->City)){
                                     
            $current_term = _sab_cities_sync_get_term_tids_by_external_id('cities', $result->CityId); 
           
            if(empty($current_term)) {
                $city_safe_name = sab_listing_create_safe_name($result->City); 

                $term = new stdClass();
                $term->name = $result->City;
                $term->vid = $result->vid; 
                $term->field_country_tr[LANGUAGE_NONE][]['tid'] = $result->CountryTID; 
                $term->field_external_id[LANGUAGE_NONE][0]['value'] = $result->CityId;
                $term->field_safe_name[LANGUAGE_NONE][0]['value'] = $city_safe_name;

                taxonomy_term_save($term);
            }
        }
       
    }
    catch(Exception $e){
        
        throw $e;
        db_set_active(); 

        watchdog_exception("Cities Sync: Error", $e, "", WATCHDOG_ERROR);
        
    }
    
}

function sab_sync_get_cities_count() {
   
    $results = array(); 
    try{ 
    
        db_set_active('nexus'); 
    
        $results = db_select('City')->fields(NULL, array('field'))->countQuery()->execute()->fetchField();

        db_set_active(); 
   
    }
    catch(Exception $e){
        dpm($e);
        db_set_active();       
    }
    
    return $results; 
}



/**
 * Returns the Difference off Campuses that are in IS and Drupal.
 */
function sab_import_get_cities($range = 0, $current_node = 0) {

    $output = array();
    
    try{
        
        db_set_active('nexus'); 
        
        $query = db_select('City', 'ct');
        $query->join('Country', 'c', 'c.CountryCode = ct.CountryCode');
        $query->fields('ct', array('CityId', 'CityName'));   
        $query->fields('c', array('CountryId'));   
     
        if($current_node > 0) {
            $query->condition('ct.CityId', $current_node, '>');
        }
        if($range > 0) {
            $query->range(0, $range);
        }
        $query->orderBy('ct.CityId', 'asc'); 

        $isdb_cities = $query->execute()->fetchAll();
     
        $count = 0;

        db_set_active(); 
        if(!empty($isdb_cities)){
            
            $v_query = db_select('taxonomy_vocabulary', 'v');
            $v_query->condition('v.machine_name', 'cities');
            $v_query->fields('v', array('vid'));
            $vid = $v_query->execute()->fetchCol();

            foreach($isdb_cities as $city) { 
                    
                if(!empty($city->CityId) && !empty($city->CountryId) && !empty($city->CityName)) {
                        
                    $city_country = $city->CityId . '-' . $city->CountryId; 

                    $output[$city_country] = new StdClass;

                    $output[$city_country]->City = $city->CityName; 
                    $output[$city_country]->CityId = $city->CityId;
                    $output[$city_country]->CountryTID = _sab_cities_sync_get_term_id($city->CountryId, 'countries'); 
                    $output[$city_country]->vid = isset($vid)? $vid[0]: NULL;
                  
                }
            }
            $count++;
             
        }    
    }
    catch(Exception $e){
        
        db_set_active();
        watchdog_exception("Cities Sync: Get Cities To Import", $e, "", WATCHDOG_ERROR);
        
    }
    
    return $output;

}
 

/**
 * Returns an array of term ids using vaocab machine name and external id.
 */
function _sab_cities_sync_get_term_tids_by_external_id($vocabulary_machine_name, $external_id)
{
    $existing_tids = array();
    $vocab = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
    if (!empty($vocab)){
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'taxonomy_term')
            ->fieldCondition('field_external_id', 'value', $external_id, '=')
            ->propertyCondition('vid', $vocab->vid, '=');
        
        $result = $query->execute();
        if (isset($result['taxonomy_term'])) {
            $existing_tids  = array_keys($result['taxonomy_term']);

        }
    }
    return $existing_tids;
}

