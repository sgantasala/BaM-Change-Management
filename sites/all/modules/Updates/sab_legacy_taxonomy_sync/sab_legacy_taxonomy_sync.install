<?php
    
///** 
// * Update Country Terms
// */
//function sab_legacy_taxonomy_sync_update_7001() {
//    if (($handle = fopen($_SERVER['APPL_PHYSICAL_PATH'] . drupal_get_path('module', 'sab_legacy_taxonomy_sync') . "/data/Countries.csv", "r")) !== FALSE) {
//        //Remove First Line from CSV:
//        fgetcsv($handle, 1000, ",");
        
//        //Adds Everything else except the first line.
//        $totalTerms = 0;
//        $totalTermsFound = 0;
        
//        while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
//            $totalTerms++;
//            //$createterm=  sab_legacy_taxonomy_sync_create_term($data,8); // create terem
  

//            $updated_term = sab_legacy_taxonomy_sync_update_term($data,28); //update term: countries vid=28 
//            if(!is_null($updated_term)){
//                $totalTermsFound++;
//                taxonomy_term_save($updated_term);
//            }
//        }
//        fclose($handle);
//    } 
    
//    return t("Countries have been updated.");

//}

///** 
// * Update Subject Terms
// */
//function sab_legacy_taxonomy_sync_update_7004() {
//    if (($handle = fopen($_SERVER['APPL_PHYSICAL_PATH'] . drupal_get_path('module', 'sab_legacy_taxonomy_sync') . "/data/subjects.csv", "r")) !== FALSE) {
//        //Remove First Line from CSV:
//        fgetcsv($handle, 1000, ",");
        
//        //Adds Everything else except the first line.
//        $totalTerms = 0;
//        $totalTermsFound = 0;
        
//        while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
//            $totalTerms++;
//            //$createterm=  sab_legacy_taxonomy_sync_create_term($data,8); // create terem
            

//            $updated_term = sab_legacy_taxonomy_sync_update_term($data,5); //update term: subjects vid=5 
//            if(!is_null($updated_term)){
//                $totalTermsFound++;
//                taxonomy_term_save($updated_term);
//            }
//        }
//        fclose($handle);
//    } 
    
//    return t("Subjects have been updated.");

//}


/** 
 * Update Subject Terms
 */
function sab_legacy_taxonomy_sync_update_none(&$sandbox) {
   
 
    $ret = array();

    // Use the sandbox at your convenience to store the information needed
    // to track progression between successive calls to the function.
    if (!isset($sandbox['progress'])) {
        // The count of nodes visited so far.
        $sandbox['progress'] = 0;
        // Total nodes that must be visited.
        $sandbox['max'] = db_query('SELECT COUNT(nid) FROM {node}')->fetchField();
        // A place to store messages during the run.
        $sandbox['messages'] = array();
        // Last node read via the query.
        $sandbox['current_node'] = -1;
    }

    // Process nodes by groups of 10 (arbitrary value).
    // When a group is processed, the batch update engine determines
    // whether it should continue processing in the same request or provide
    // progress feedback to the user and wait for the next request.
    $limit = 10;

    // Retrieve the next group of nids.
    $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->orderBy('n.nid', 'ASC')
      ->where('n.nid > :nid', array(':nid' => $sandbox['current_node']))
      ->extend('PagerDefault')
      ->limit($limit)
      ->execute();
    foreach ($result as $row) {
        // Here we actually perform a dummy 'update' on the current node.
        $node = db_query('SELECT nid FROM {node} WHERE nid = :nid', array(':nid' => $row->nid))->fetchField();

        // Update our progress information.
        $sandbox['progress']++;
        $sandbox['current_node'] = $row->nid;
    }

    // Set the "finished" status, to tell batch engine whether this function
    // needs to run again. If you set a float, this will indicate the progress
    // of the batch so the progress bar will update.
    $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);

    // Set up a per-run message; Make a copy of $sandbox so we can change it.
    // This is simply a debugging stanza to illustrate how to capture status
    // from each pass through hook_update_N().
    $sandbox_status = $sandbox;
    // Don't want them in the output.
    unset($sandbox_status['messages']);
    $sandbox['messages'][] = t('$sandbox=') . print_r($sandbox_status, TRUE);

    if ($sandbox['#finished']) {
        // hook_update_N() may optionally return a string which will be displayed
        // to the user.
        $final_message = '<ul><li>' . implode('</li><li>', $sandbox['messages']) . "</li></ul>";
        return t('The batch_example demonstration update did what it was supposed to do: @message', array('@message' => $final_message));
    }
    }
 


