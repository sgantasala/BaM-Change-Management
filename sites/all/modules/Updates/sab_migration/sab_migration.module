<?php


function sab_migration_node_view($node, $view_mode, $language){

    if(node_is_page($node)){
        //dpm("Hello");

        //$query = db_select('node', 'n')
        //      ->fields('n', array('nid'))
        //      ->orderBy('n.nid', 'ASC')
        //      ->condition('type', array('product_list'))
        //      ->countQuery()
        //      ->execute()
        //      ->fetchField();

        //$results = db_select('node', 'n')
        // ->fields('n', array('nid'))
        // ->condition('type', array('product_list'))
        // ->range(0, 1)
        // ->orderBy('n.nid', 'ASC')
        // ->execute()
        // ->fetchAll();

        //dpm($results);

        //$query = db_select('node', 'n')
        //      ->fields('n', array('nid'));
        //$query->join('field_revision_field_country_tr', 'c', 'n.nid = c.entity_id AND (c.entity_type = \'node\' AND c.deleted = 0)');
        
        //$count = $query->orderBy('n.nid', 'ASC')
        //      ->condition('type', array('product_list'))
        //      ->countQuery()
        //      ->execute()
        //      ->fetchField();


        //dpm($count);

        //$max = db_query('select MAX(nid) FROM {node} n WHERE n.type = \'product_list\' and n.status = 1')->execute();
        $first_fragment = "in-latvia";

        $alias = drupal_get_path_alias(current_path());

        $url_segments = explode('/', $alias);

        array_unshift($url_segments,  trim($first_fragment, '-'));

        //dpm($url_segments);
        
        //$node->path['pathauto'] = FALSE;
        //$node->path['alias'] = implode('/', $url_segments);


    }

}

 
function sab_migration_node_basic_properties(){

	$node = new stdclass;
	$node->type = "product_list";
	node_object_prepare($node);
	$node->language = LANGUAGE_NONE;
	$node->uid = 1;
	$node->promote = 0;
	$node->comment = 0;
	$node->status = 1;

	return $node;
	
}


function sab_migration_get_tids_from_tree($vocab, $can_be_null = TRUE){

	$vid = db_select('taxonomy_vocabulary', 'v')
	->fields('v', array('vid'))
	->condition('machine_name', $vocab)
	->execute()
	->fetchField();
	
	$tree = taxonomy_get_tree($vid, 0, NULL, TRUE);
	
	$ouput = array();
	foreach($tree as $key => $value){
		$ouput[] = $value->tid;
	}
	
	if($can_be_null)
		array_push($ouput, 0);
	
	return $ouput;
	
}

function sab_migration_get_tids_from_tree_batch($vocab, $sandbox){

	$vid = db_select('taxonomy_vocabulary', 'v')
	->fields('v', array('vid'))
	->condition('machine_name', $vocab)
	->execute()
	->fetchField();
	
 
     $limit=5;
    
    // Retrieve the next group of nids.
    $result = db_select('taxonomy_term_data', 'n')
      ->fields('n', array('tid'))
      ->orderBy('n.tid', 'ASC')
      ->where('n.tid > :tid', array(':tid' => $sandbox['current_node']))
      ->limit($limit)
      ->execute();

    dpm('test'.$result);
    return $result;
	
}

function sab_migration_get_tids_from_tree_by_name($vocab, $name, $can_be_null = TRUE){

	$vid = db_select('taxonomy_vocabulary', 'v')
	->fields('v', array('vid'))
	->condition('machine_name', $vocab)
	->execute()
	->fetchField();
	
	$tree = taxonomy_get_tree($vid, 0, NULL, TRUE);
 
	$ouput = array();
	foreach($tree as $key => $value){
 
    
        $key_exists = array_key_exists($value->name, $name);
        if ($key_exists ==1)
        {
            $ouput[] = $value->tid;
        }
	}
	
	if($can_be_null)
		array_push($ouput, 0);
	
	return $ouput;
	
}


function sab_migration_array_cartesian() {
	$_ = func_get_args();
	if(count($_) == 0)
		return array(array());
	$a = array_shift($_);
	$c = call_user_func_array(__FUNCTION__, $_);
	$r = array();
	foreach($a as $v)
		foreach($c as $p)
			$r[] = array_merge(array($v), $p);
	return $r;
}


function sab_migration_array_cartesian_override() {
	$_ = func_get_args();
	if(count($_) == 0)
		return array(array());
	$a = array_shift($_);
	$c = call_user_func_array(__FUNCTION__, $_);
	$r = array();
	foreach($a as $v)
		foreach($c as $p)
			$r[] = array_merge(array($v), $p);
	return $r;
}


function sab_migration_clean_url_segment($url){
	$url = preg_replace("/[^a-zA-Z0-9\/_|+ -]/", '', $url);
	$url = strtolower(trim($url, '-'));
	$url = preg_replace("/[\/_|+ -]+/", '-', $url);
	return $url;
}


function sab_migration_get_terms($vid, $tid1,$tid2){
 
 
    $query = db_select('taxonomy_term_data', 't');
    $query->condition('vid', $vid, '=')
          ->condition('t.tid', $tid1, '>')
          ->condition('t.tid', $tid2, '<')
          ->fields('t', array('tid'))
          ->orderBy('t.tid', 'ASC');

    $tree = $query->execute()->fetchAll();

 
	$ouput = array();
	foreach($tree as $key => $value){
		$ouput[] = $value->tid;
	}
	
 	
	return $ouput;


 
 
}


function sab_migration_create_urls($vid, $tid1, $tid2){

    $countries =  sab_migration_get_terms($vid, $tid1,$tid2);
 
    $programtype = taxonomy_get_term_by_name('Full Degree');

    $country_terms = taxonomy_term_load_multiple($countries);

    $programtype_term = current($programtype);

    $specialties=sab_migration_get_tids_from_tree('specialties',false);   
    $specialty_terms = taxonomy_term_load_multiple($specialties);

    $tid = $programtype_term->tid;

    $specialty_combos= sab_migration_array_cartesian(
        $countries,
        $specialties
    );

    foreach($specialty_combos as $combo){

        $node = sab_migration_node_basic_properties();



        $node->title = $specialty_terms[$combo[1]]->name;

        if($combo[0] > 0){
            $node->field_country_tr[LANGUAGE_NONE][0]['tid'] = $combo[0];
        }

        $node->field_specialty_tr[LANGUAGE_NONE][0]['tid'] = $combo[1];
        $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;



        $country_name =  $country_terms[$combo[0]]->name;
        $specialty_name =  $specialty_terms[$combo[1]]->name;

        //dpm($term_name);

        $url_segments = array(
           sab_migration_clean_url_segment('full-degree-in-'.$country_name),
           sab_migration_clean_url_segment($specialty_name),
       );

        // dpm($url_segments);
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = implode('/', $url_segments);

        $node = node_submit($node);
        node_save($node);

    }  



}