<?php

 /** 
 * Add IS Categories Terms
 */
function sab_migration_update_7001(){

    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'categories')
        ->execute()
        ->fetchField();

        db_set_active('nexus');

        //Categories from Nexus DB
        $query = db_select('Category', 'c');
        $query->join('CategorySubject', 'cs', 'cs.CategoryId = c.CategoryId');
        $query->condition('cs.applicationid', 2)  
            ->condition('cs.isdeleted', 0)
            ->condition('cs.isenabled', 1)
            ->fields('c',array('CategoryName', 'CategoryId'));
        $results = $query->execute()->fetchAllAssoc('CategoryId');
		
        db_set_active();
		
        foreach($results as $k => $v){
            
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->CategoryId;
            $term->name = $v->CategoryName;
            $term->vid = $vid;
			
            taxonomy_term_save($term);
            
        }
		
        return t("Categories have been inserted.");

    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
}
 

/** 
 * Adds IS Subjects Terms
 */
function sab_migration_update_7004() {

    try{
		
        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'subjects')
        ->execute()
        ->fetchField();
        
        $query = db_select('taxonomy_term_data', 'td');
        $query->join('field_data_field_external_id', 'e', 'e.entity_id = td.tid');
        $query->condition('e.entity_type', 'taxonomy_term')
            ->condition('e.bundle', 'subjects')
            ->fields('td')
            ->fields('e', array('field_external_id_value'))
            ->orderBy('e.field_external_id_value', 'ASC');
        $existing_subjects = $query->execute()->fetchAllAssoc('field_external_id_value');

        $query = db_select('taxonomy_term_data', 'td');
        $query->join('field_data_field_external_id', 'e', 'e.entity_id = td.tid');
        $query->condition('e.entity_type', 'taxonomy_term')
            ->condition('e.bundle', 'categories')
            ->fields('td')
            ->fields('e', array('field_external_id_value'))
            ->orderBy('e.field_external_id_value', 'ASC');
        $categories = $query->execute()->fetchAllAssoc('field_external_id_value');
		
        db_set_active('nexus');
		
        //Subjects from Nexus DB
        $query = db_select('Subject', 's');
        $query->join('CategorySubject', 'cs', 'cs.SubjectId = s.SubjectId'); //Changed sc to cs.
        $query->join('Category', 'c', 'c.CategoryId = cs.CategoryId');
        $query->condition('cs.applicationid', 2)
            ->condition('cs.isdeleted', 0)
            ->condition('cs.isenabled', 1)
            ->fields('s',array('SubjectName', 'SubjectId'))
            ->fields('cs',array('CategoryId'))
            ->fields('c',array('CategoryName'));
        $results = $query->execute()->fetchAll();
		
        db_set_active();
		
        $subjects = array();
        foreach($results as $k => $v){
		    
            //Updates Any Existing Term Names.
            // if(isset($existing_subjects[$v->SubjectId]) && $v->SubjectName != $existing_subjects[$v->SubjectId]->name){
            
            // $term = $existing_subjects[$v->SubjectId];
            // $term->name =  $v->SubjectName;
            // taxonomy_term_save($term);

            // //Creates a new Subject Term if it does not exist.
            // }else if(!isset($existing_subjects[$v->SubjectId])){
            
            $term = new stdclass();
			
            if(in_array($v->SubjectName, $subjects)){

                $term_data = db_select('taxonomy_term_data', 'td')
                ->fields('td')
                ->condition('td.vid', $vid)
                ->condition('name', $v->SubjectName)
                ->execute()->fetchObject();
				
                $term = taxonomy_term_load($term_data->tid);
                $term->field_category_tr[LANGUAGE_NONE][]['tid'] = $categories[$v->CategoryId]->tid;
				
            }else {

                $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->SubjectId;
                $term->name = $v->SubjectName;
                $term->vid = $vid;
                $term->field_category_tr[LANGUAGE_NONE][]['tid'] = $categories[$v->CategoryId]->tid;
                
            }

            taxonomy_term_save($term);
			
            $subjects[] = $v->SubjectName;
            
            //}
            
        }
		
        return t("Subjects have been inserted.");
		
    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
}


/** 
 * Add IS Program Types
 */
function sab_migration_update_7005(){

    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'program_types')
        ->execute()
        ->fetchField();

        db_set_active('nexus');

        //Categories from Nexus DB
        $query = db_select('ProgramType', 'c');
        $query->condition('c.isenabled', 1)
            ->fields('c',array('ProgramTypeName', 'ProgramTypeId'));
        $results = $query->execute()->fetchAllAssoc('ProgramTypeId');
		
        db_set_active();
		
        foreach($results as $k => $v){
            
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->ProgramTypeId;
            $term->name = $v->ProgramTypeName;
            $term->vid = $vid;
			
            taxonomy_term_save($term);
            
        }
		
        return t("Program Types have been inserted.");

    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
}


/** 
 * Adds IS Specialties Terms 
 */
function  sab_migration_update_7006() {
	
    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'specialties')
        ->execute()
        ->fetchField();
        
        $query = db_select('taxonomy_term_data', 'td');
        $query->join('field_data_field_external_id', 'e', 'e.entity_id = td.tid');
        $query->condition('e.entity_type', 'taxonomy_term')
            ->condition('e.bundle', 'specialties')
            ->fields('td')
            ->fields('e', array('field_external_id_value'))
            ->orderBy('e.field_external_id_value', 'ASC');
        $existing_specialties = $query->execute()->fetchAllAssoc('field_external_id_value');
		
        $query = db_select('taxonomy_term_data', 'td');
        $query->join('field_data_field_external_id', 'e', 'e.entity_id = td.tid');
        $query->condition('e.entity_type', 'taxonomy_term')
            ->condition('e.bundle', 'subjects')
            ->fields('td')
            ->fields('e', array('field_external_id_value'))
            ->orderBy('e.field_external_id_value', 'ASC');
        $subjects = $query->execute()->fetchAllAssoc('field_external_id_value');
        
        $subject_names = array();
        foreach($subjects as $subject){
            
            $subject_names[] = $subject->name;
            
        }
		
        db_set_active('nexus');
		
        //Specialties from Nexus DB
        $query = db_select('Specialty', 'sp');
        $query->join('SubjectSpecialty', 'ss', 'sp.SpecialtyId = ss.SpecialtyId');
        $query->join('Subject', 's', 's.SubjectId = ss.SubjectId');
        $query->condition('ss.applicationid', 2)
            ->condition('ss.isenabled', 1)
            ->condition('sp.isenabled', 1)
            ->fields('sp',array('SpecialtyName', 'SpecialtyId'))
            ->fields('ss',array('SubjectId'))
            ->fields('s',array('SubjectName'));
        $results = $query->execute()->fetchAll();
		
        db_set_active();
		
        $specialties = array();
        foreach($results as $k => $v){
			
			//Prevents Specialties which have the same name as a Subject from being inserted.
			if(!in_array($v->SpecialtyName, $subject_names)){
			
				////Updates Any Existing Term Names.
				// if(isset($existing_specialties[$v->SpecialtyId]) && $v->SpecialtyName != $existing_specialties[$v->SpecialtyId]->name){
					
					// $term = $existing_specialties[$v->SpecialtyId];
					// $term->name = $v->SpecialtyName;
					// taxonomy_term_save($term);
					
				// //Creates a new Subject Term if it does not exist.
				// }else if(!isset($existing_specialties[$v->SpecialtyId])){
					
					$term = new stdclass;
					
					if(in_array($v->SpecialtyName, $specialties)){

						$term_data = db_select('taxonomy_term_data', 'td')
						->fields('td')
						->condition('td.vid', $vid)
						->condition('name', $v->SpecialtyName)
						->execute()->fetchObject();
						
						$term = taxonomy_term_load($term_data->tid);
						$term->field_subject_tr[LANGUAGE_NONE][]['tid'] = $subjects[$v->SubjectId]->tid;
						
					}else {
						
						$term = new stdclass();
						$term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->SpecialtyId;
						$term->name = $v->SpecialtyName;
						$term->vid = $vid;
						$term->field_subject_tr[LANGUAGE_NONE][]['tid'] = $subjects[$v->SubjectId]->tid;
						
					}
					
					taxonomy_term_save($term);
					
					$specialties[] = $v->SpecialtyName;
					
				//}
			
			}
		
        }

        return t("Specialties have been inserted.");
	
    }catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
	
    }

}



/** 
 * Adds IS Work Types
 */
function sab_migration_update_7007() {

    try{
		
        $p_vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'program_types')
        ->execute()
        ->fetchField();

        $query = db_select('taxonomy_term_data', 'td');
        $query->join('field_data_field_external_id', 'e', 'e.entity_id = td.tid');
        $query->condition('td.vid', $p_vid)
            ->condition('e.entity_type', 'taxonomy_term')
            ->condition('e.bundle', 'program_types')
            ->fields('td')
            ->fields('e', array('field_external_id_value'))
            ->orderBy('e.field_external_id_value', 'ASC');
        $programtypes = $query->execute()->fetchAllAssoc('field_external_id_value');
		
        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'work_types')
        ->execute()
        ->fetchField();
        
        db_set_active('nexus');
		
        $results = db_select('WorkType', 's')
        ->fields('s', array('WorkTypeId', 'WorkTypeName', 'ProgramTypeId'))
        ->execute()
        ->fetchAll();
		
        db_set_active();
        
        foreach($results as $k => $v){
			
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->WorkTypeId;
            $term->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $programtypes[$v->ProgramTypeId]->tid;
            $term->name = $v->WorkTypeName;
            $term->vid = $vid;

            taxonomy_term_save($term);
            
        }
		
        return t("Work Types have been inserted.");

    }
    catch(Exception $e){
		
        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
	
}

/** 
 * Add IS Durations
 */
function sab_migration_update_7008(){

    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'durations')
        ->execute()
        ->fetchField();

        db_set_active('nexus');

        //Categories from Nexus DB
        $query = db_select('Duration', 'c');
        $query->condition('c.isenabled', 1)
            ->fields('c',array('DurationName', 'DurationId'));
        $results = $query->execute()->fetchAllAssoc('DurationId');
		
        db_set_active();
		
        foreach($results as $k => $v){
            
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->DurationId;
            $term->name = $v->DurationName;
            $term->vid = $vid;
			
            taxonomy_term_save($term);
            
        }
		
        return t("Durations have been inserted.");

    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
}

/** 
 * Add IS Intensive Language
 */
function sab_migration_update_7009(){

    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'intensive_languages')
        ->execute()
        ->fetchField();

        db_set_active('nexus');

        //Intensive Languages from Nexus DB
        $query = db_select('ProgramLanguage', 'c');
        $query->condition('c.isenabled', 1)
            ->fields('c',array('Language', 'ProgramLanguageId'));
        $results = $query->execute()->fetchAllAssoc('ProgramLanguageId');
		
        db_set_active();
		
        foreach($results as $k => $v){
            
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->ProgramLanguageId;
            $term->name = $v->Language;
            $term->vid = $vid;
			
            taxonomy_term_save($term);
            
        }
		
        return t("Intensive Languages have been inserted.");

    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
}

/** 
 * Add IS Placement Audiences
 */
function sab_migration_update_7010(){

    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'placement_audiences')
        ->execute()
        ->fetchField();

        db_set_active('nexus');

        //Placement Audiences from Nexus DB
        $query = db_select('PlacementAudience', 'c');
        $query->condition('c.isenabled', 1)
            ->fields('c',array('PlacementAudienceName', 'PlacementAudienceId'));
        $results = $query->execute()->fetchAllAssoc('PlacementAudienceId');
		
        db_set_active();
		
        foreach($results as $k => $v){
            
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->PlacementAudienceId;
            $term->name = $v->PlacementAudienceName;
            $term->vid = $vid;
			
            taxonomy_term_save($term);
            
        }
		
        return t("Placement Audiences have been inserted.");

    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
}

/** 
 * Add IS Teach Abroad Types
 */
function sab_migration_update_7011(){

    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'teach_abroad_types')
        ->execute()
        ->fetchField();

        db_set_active('nexus');

        //Placement Audiences from Nexus DB
        $query = db_select('TeachAbroadType', 'c');
        $query->condition('c.isenabled', 1)
            ->fields('c',array('TeachAbroadTypeName', 'TeachAbroadTypeId'));
        $results = $query->execute()->fetchAllAssoc('TeachAbroadTypeId');
		
        db_set_active();
		
        foreach($results as $k => $v){
            
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->TeachAbroadTypeId;
            $term->name = $v->TeachAbroadTypeName;
            $term->vid = $vid;
			
            taxonomy_term_save($term);
            
        }
		
        return t("Teach Abroad Types have been inserted.");

    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
}

/** 
 * Add IS Terms
 */
function sab_migration_update_7013(){

    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'terms')
        ->execute()
        ->fetchField();

        db_set_active('nexus');

        //Placement Audiences from Nexus DB
        $query = db_select('Term', 'c');
        $query->condition('c.isenabled', 1)
            ->fields('c',array('TermName', 'TermId'));
        $results = $query->execute()->fetchAllAssoc('TermId');
		
        db_set_active();
		
        foreach($results as $k => $v){
            
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->TermId;
            $term->name = $v->TermName;
            $term->vid = $vid;
			
            taxonomy_term_save($term);
            
        }
		
        return t("Terms have been inserted.");

    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }
	
}



/** 
 * Adds IS Specialty Nodes
 */
function sab_migration_update_7015() {

    $specialties = sab_migration_get_tids_from_tree('specialties', false);
    $specialty_terms = taxonomy_term_load_multiple($specialties);
	
    foreach($specialties as $specialty){
		
        $node = sab_migration_node_basic_properties();

        $node->title = $specialty_terms[$specialty]->name;
        $node->field_specialty_tr[LANGUAGE_NONE][0]['tid'] = $specialty;
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = sab_migration_clean_url_segment($specialty_terms[$specialty]->name);
		
        $node = node_submit($node);
        node_save($node);
        
    }
	
    return 'specialtie Nodes have been created.';
	
}


/** 
 * Adds IS Term Nodes
 */
function sab_migration_update_7016() {

    $terms = sab_migration_get_tids_from_tree('terms', false);
    $term_terms = taxonomy_term_load_multiple($terms);

    foreach($terms as $term){

        $node = sab_migration_node_basic_properties();

        $node->title = $term_terms[$term]->name;
        $node->field_term_tr[LANGUAGE_NONE][0]['tid'] = $term;

        $node->path['alias'] = sab_migration_clean_url_segment($term_terms[$term]->name);

        $node = node_submit($node);
        node_save($node);

    }

    return 'Term Nodes have been created.';

}


/** 
 * Adds IS Term, specialty Nodes
 */
function sab_migration_update_7017() {

    $terms = sab_migration_get_tids_from_tree('terms', false);
    $specialties = sab_migration_get_tids_from_tree('specialties', false);

    $specialty_combos= sab_migration_array_cartesian(
        $terms,
        $specialties
    );


    $specialty_terms = taxonomy_term_load_multiple($specialties);
    $term_terms = taxonomy_term_load_multiple($terms);

    foreach($specialty_combos as $combo){

        $node = sab_migration_node_basic_properties();

        $node->title = $specialty_terms[$combo[1]]->name;

        if($combo[0] > 0){
            $node->field_term_tr[LANGUAGE_NONE][0]['tid'] = $combo[0];
        }

         $node->field_specialty_tr[LANGUAGE_NONE][0]['tid'] = $combo[1];

         $term_name = $term_terms[$combo[0]]->name;

         $url_segments = array(
            sab_migration_clean_url_segment($term_name),
            sab_migration_clean_url_segment($specialty_terms[$combo[1]]->name),
        );
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = implode('/', $url_segments);

        $node = node_submit($node);
        node_save($node);

    }

    return 'term/specialty Nodes have been created.';

}

 
/** 
 * Adds IS ProgramType="Volunteer Abroad", worldwide Nodes
 */
function sab_migration_update_7018() {

    
    $programtype = taxonomy_get_term_by_name('Volunteer Abroad');
    
    
    $programtype_term = current($programtype);

    $tid = $programtype_term->tid;
    

    //  dpm($tid);
    
    $node = sab_migration_node_basic_properties();

    $node->title = 'Volunteer Abroad';
    $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

    
    $node->path['alias'] = 'volunteer-worldwide';
    
    $node = node_submit($node);
    node_save($node);
    
    

    return 'programtype "Volunteer Abroad" Nodes have been created.';

}


/** 
// * Adds IS ProgramType="Intern Abroad", worldwide Nodes
 */
function sab_migration_update_7019() {

    
    $programtype = taxonomy_get_term_by_name('Intern Abroad');
    
    
    $programtype_term = current($programtype);
    //$programtype_legacy_name = $programtype_term->field_legacy_name[LANGUAGE_NONE][0]['value'];
    $tid = $programtype_term->tid;
    

    //  dpm($tid);
    
    $node = sab_migration_node_basic_properties();

    $node->title = 'Intern Abroad';
    $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

    $node->path['alias'] = 'internships-worldwide';
    
    $node = node_submit($node);
    node_save($node);
    
    
    
    return 'programtype "Intern Abroad" Nodes have been created.';

}


/** 
 * Adds IS ProgramType="Intensive Language", worldwide Nodes
 */
function sab_migration_update_7020() {

    
    $programtype = taxonomy_get_term_by_name('Intensive Language');
    
    
    $programtype_term = current($programtype);
    //$programtype_legacy_name = $programtype_term->field_legacy_name[LANGUAGE_NONE][0]['value'];
    $tid = $programtype_term->tid;
    

    //  dpm($tid);
    
    $node = sab_migration_node_basic_properties();

    $node->title = 'Intensive Language';
    $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

    $node->path['alias'] = 'intensive-language-worldwide';
    
    $node = node_submit($node);
    node_save($node);
    
    

    return 'programtype "Intensive Language" Nodes have been created.';

}

/** 
// * Adds IS ProgramType="Intensive Language", worldwide, Language Nodes
 */
function sab_migration_update_7021() {

    
    $programtype = taxonomy_get_term_by_name('Intensive Language');
    $intensivelanguages = sab_migration_get_tids_from_tree('intensive_languages', false);
    
    $programtype_term = current($programtype);
    //$programtype_legacy_name = $programtype_term->field_legacy_name[LANGUAGE_NONE][0]['value'];
    $tid = $programtype_term->tid;
    
    $intensivelanguage_terms = taxonomy_term_load_multiple($intensivelanguages);
    //  dpm($tid);
    
    

    foreach($intensivelanguages as $intensivelanguage){
		
        $node = sab_migration_node_basic_properties();

        $node->title = $intensivelanguage_terms[$intensivelanguage]->name;
        $node->field_intensive_language_tr[LANGUAGE_NONE][0]['tid'] = $intensivelanguage;
        $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

        $url_segments = array(
            sab_migration_clean_url_segment('intensive-language-worldwide'),
            sab_migration_clean_url_segment($intensivelanguage_terms[$intensivelanguage]->name),
        );
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = implode('/', $url_segments);

        
        $node = node_submit($node);
        node_save($node);
        
    }
    

    return 'programtype "Intensive Language", Language Nodes have been created.';

}


/** 
// * Adds IS ProgramType="Full Degree", worldwide Nodes
 */
function sab_migration_update_7022() {

    
    $programtype = taxonomy_get_term_by_name('Full Degree');
    
    
    $programtype_term = current($programtype);
    //$programtype_legacy_name = $programtype_term->field_legacy_name[LANGUAGE_NONE][0]['value'];
    $tid = $programtype_term->tid;
    

    //  dpm($tid);
    
    $node = sab_migration_node_basic_properties();

    $node->title = 'Full Degree';
    $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

    $node->path['alias'] = 'full-degree-worldwide';
    
    $node = node_submit($node);
    node_save($node);
    
    

    return 'Full Degree/Worldwide Nodes have been created.';

}


/** 
 * Adds IS ProgramType="Full Degree", worldwide, specialty Nodes
 */
function sab_migration_update_7023() {

    
    $programtype = taxonomy_get_term_by_name('Full Degree');
    $specialties = sab_migration_get_tids_from_tree('specialties', false);
    
    $programtype_term = current($programtype);
    //$programtype_legacy_name = $programtype_term->field_legacy_name[LANGUAGE_NONE][0]['value'];
    $tid = $programtype_term->tid;
    
    $specialty_terms = taxonomy_term_load_multiple($specialties);
    //  dpm($tid);
    
    

    foreach($specialties as $specialty){
		
        $node = sab_migration_node_basic_properties();

        $node->title = $specialty_terms[$specialty]->name;
        $node->field_specialty_tr[LANGUAGE_NONE][0]['tid'] = $specialty;
        $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

        $url_segments = array(
            sab_migration_clean_url_segment('full-degree-worldwide'),
            sab_migration_clean_url_segment($specialty_terms[$specialty]->name),
        );
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = implode('/', $url_segments);

        
        $node = node_submit($node);
        node_save($node);
        
    }
    

    return 'Full Degree, specialty Nodes have been created.';

}

/** 
 * Adds IS ProgramType="Study Abroad", worldwide  Nodes  
 */
function sab_migration_update_7024()
{
    $name=array('High School' => 12 ,'Graduate'=>25, 'Gap Year' =>22, 'Undergraduate' =>'24');

    $programtype = taxonomy_get_term_by_name('Study Abroad');
    $levels=sab_migration_get_tids_from_tree_by_name('levels',$name,false);  //only for study abroad program type
    $level_terms = taxonomy_term_load_multiple($levels);

    $programtype_term = current($programtype);
    $tid = $programtype_term->tid;
    
   
    
    
    foreach($levels as $level){
		
        $node = sab_migration_node_basic_properties();

        $node->title = $level_terms[$level]->name;
        $node->field_level_tr[LANGUAGE_NONE][0]['tid'] = $level;
        $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

       
        $node->path['pathauto'] = FALSE;
        if ($level_terms[$level]->name =='Undergraduate')
        {
            $node->path['alias'] =   'worldwide';
        }
        else 
        {
            $node->path['alias'] =   sab_migration_clean_url_segment($level_terms[$level]->name).'-worldwide';
        }
        
        $node = node_submit($node);
        node_save($node);
        
    }
    

    return 'ProgramType="Study Abroad", worldwide  Nodes ';
  
  

}

/** 
 * Adds IS ProgramType="Study Abroad", worldwide, Term  Nodes
 */
function sab_migration_update_7025() {

    $name=array('High School' => 12 ,'Graduate'=>25, 'Gap Year' =>22, 'Undergraduate' =>'24');


    $levels=sab_migration_get_tids_from_tree_by_name('levels',$name,false);  //only for study abroad program type
    $level_terms = taxonomy_term_load_multiple($levels);

    $terms=sab_migration_get_tids_from_tree('terms',false);   
    $term_terms = taxonomy_term_load_multiple($terms);

 
    $programtype = taxonomy_get_term_by_name('Study Abroad');
    
    $programtype_term = current($programtype);
    $tid = $programtype_term->tid;

    $level_combos= sab_migration_array_cartesian(
        $levels,
        $terms
    );
 
     
 
    foreach($level_combos as $combo){

        $node = sab_migration_node_basic_properties();

        

        $node->title = $term_terms[$combo[1]]->name;

        if($combo[0] > 0){
            $node->field_level_tr[LANGUAGE_NONE][0]['tid'] = $combo[0];
        }

        $node->field_term_tr[LANGUAGE_NONE][0]['tid'] = $combo[1];
        $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;
        
        
        


        if ($level_terms[$combo[0]]->name =='Undergraduate')
        {
            $level_name ='worldwide';
        }
        else 
        {
            $level_name = $level_terms[$combo[0]]->name.'-worldwide';
        }
        
        

        $term_name =  $term_terms[$combo[1]]->name;

        //dpm($term_name);

        $url_segments = array(
           sab_migration_clean_url_segment($level_name),
           sab_migration_clean_url_segment($term_name),
       );

        // dpm($url_segments);
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = implode('/', $url_segments);

        $node = node_submit($node);
        node_save($node);
     
    }   
        return 'ProgramType="Study Abroad", worldwide, Term  Nodes.';


}

/** 
 * Adds IS ProgramType="Study Abroad", worldwide, Specialty  Nodes
 */
function sab_migration_update_7026() {

    $name=array('High School' => 12 ,'Graduate'=>25, 'Gap Year' =>22, 'Undergraduate' =>'24');


    $levels=sab_migration_get_tids_from_tree_by_name('levels',$name,false);  //only for study abroad program type
    $level_terms = taxonomy_term_load_multiple($levels);

    $specialties=sab_migration_get_tids_from_tree('specialties',false);   
    $specialty_terms = taxonomy_term_load_multiple($specialties);

    
    $programtype = taxonomy_get_term_by_name('Study Abroad');
    
    $programtype_term = current($programtype);
    $tid = $programtype_term->tid;

    $level_combos= sab_migration_array_cartesian(
        $levels,
        $specialties
    );
    
    
    
    foreach($level_combos as $combo){

        $node = sab_migration_node_basic_properties();

        

        $node->title = $specialty_terms[$combo[1]]->name;

        if($combo[0] > 0){
            $node->field_level_tr[LANGUAGE_NONE][0]['tid'] = $combo[0];
        }

        $node->field_specialty_tr[LANGUAGE_NONE][0]['tid'] = $combo[1];
        $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;
        
        
        if ($level_terms[$combo[0]]->name =='Undergraduate')
        {
            $level_name ='worldwide';
        }
        else 
        {
            $level_name = $level_terms[$combo[0]]->name.'-worldwide';
        }
        
        

        $specialty_name =  $specialty_terms[$combo[1]]->name;

        //dpm($term_name);

        $url_segments = array(
           sab_migration_clean_url_segment($level_name),
           sab_migration_clean_url_segment($specialty_name),
       );

        // dpm($url_segments);
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = implode('/', $url_segments);

        $node = node_submit($node);
        node_save($node);
        
    }   
    return 'ProgramType="Study Abroad", worldwide, Specialty  Nodes.';


}




/** 
 * Adds IS ProgramType="Study Abroad", Level, Term, Specialty Nodes
 */
function sab_migration_update_7027() {

    $name=array('High School' => 12 ,'Graduate'=>25, 'Gap Year' =>22, 'Undergraduate' =>'24');
    $programtype = taxonomy_get_term_by_name('Study Abroad');

    $programtype_term = current($programtype);
    $tid = $programtype_term->tid;


    $specialties = sab_migration_get_tids_from_tree('specialties', false);
    $specialty_terms = taxonomy_term_load_multiple($specialties);

    $levels=sab_migration_get_tids_from_tree_by_name('levels',$name, false);  //only for study abroad program type
    $level_terms = taxonomy_term_load_multiple($levels);

    $terms=sab_migration_get_tids_from_tree('terms',false);   
    $term_terms = taxonomy_term_load_multiple($terms);


    $level_combos= sab_migration_array_cartesian(
        $levels,
        $terms
    );

    $specialty_combos= sab_migration_array_cartesian(
        $level_combos,
        $specialties 
    );

 

    foreach($specialty_combos as $combo){

        $node = sab_migration_node_basic_properties();

        $node->title = $specialty_terms[$combo[1]]->name;

        if($combo[0] > 0){
            $node->field_level_tr[LANGUAGE_NONE][0]['tid'] = $combo[0][0];
        }

        $node->field_specialty_tr[LANGUAGE_NONE][0]['tid'] = $combo[1];
        $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;
        $node->field_term_tr[LANGUAGE_NONE][0]['tid'] = $combo[0][1];

        
        if ( $level_terms[$combo[0][0]]->name =='Undergraduate')
        {
            $level_name ='worldwide';
        }
        else
        {
            $level_name = $level_terms[$combo[0][0]]->name.'-worldwide';
        }

            $term_name = $term_terms[$combo[0][1]]->name;
            $specialty_name = $specialty_terms[$combo[1]]->name;
     

        $url_segments = array(
           sab_migration_clean_url_segment($level_name),
            sab_migration_clean_url_segment($term_name),   
            sab_migration_clean_url_segment($specialty_name),
       );
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = implode('/', $url_segments);

        $node = node_submit($node);
        node_save($node);

    }
    return ' ProgramType="Study Abroad", Level, Term, Specialty Nodes.';

}


/** 
// * Adds IS ProgramType="Teach Abroad", worldwide Nodes
 */
function sab_migration_update_7028() {

    
    $programtype = taxonomy_get_term_by_name('Teach Abroad');
    
    
    $programtype_term = current($programtype);

    $tid = $programtype_term->tid;
    

    //  dpm($tid);
    
    $node = sab_migration_node_basic_properties();

    $node->title = 'Teach Abroad';
    $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

    $node->path['pathauto'] = FALSE;
    $node->path['alias'] = 'tefl-courses-worldwide';
    
    $node = node_submit($node);
    node_save($node);
    
    

    return 'Teach Abroad/Worldwide Nodes have been created.';

}


/** 
// * Adds IS ProgramType="Teach Abroad", worldwide Nodes
 */
function sab_migration_update_7029() {

    
    $programtype = taxonomy_get_term_by_name('Teach Abroad');
    
    
    $programtype_term = current($programtype);

    $tid = $programtype_term->tid;
    

    //  dpm($tid);
    
    $node = sab_migration_node_basic_properties();

    $node->title = 'Teach Abroad';
    $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

    $node->path['pathauto'] = FALSE;
    $node->path['alias'] = 'tefl-courses-worldwide';
    
    $node = node_submit($node);
    node_save($node);
    
    

    return 'Teach Abroad/Worldwide Nodes have been created.';

}

/** 
 * Adds IS ProgramType="Teach Abroad", Term Nodes
 */
function sab_migration_update_7030() {

    
    $programtype = taxonomy_get_term_by_name('Teach Abroad');
    $terms = sab_migration_get_tids_from_tree('terms', false);
    
    $programtype_term = current($programtype);
    //$programtype_legacy_name = $programtype_term->field_legacy_name[LANGUAGE_NONE][0]['value'];
    $tid = $programtype_term->tid;
    
    $term_terms = taxonomy_term_load_multiple($terms);
    //  dpm($tid);
    
    

    foreach($terms as $term){
		
        $node = sab_migration_node_basic_properties();

        $node->title = $term_terms[$term]->name;
        $node->field_term_tr[LANGUAGE_NONE][0]['tid'] = $term;
        $node->field_program_type_tr[LANGUAGE_NONE][0]['tid'] = $tid;

        $url_segments = array(
            sab_migration_clean_url_segment('Tefl-courses-worldwide'),
            sab_migration_clean_url_segment($term_terms[$term]->name),
        );
        $node->path['pathauto'] = FALSE;
        $node->path['alias'] = implode('/', $url_segments);

        
        $node = node_submit($node);
        node_save($node);
        
    }
    

    return 'Teach Abroad, term Nodes have been created.';

}

/**
 *  delete duplicated Volunteer Abroad 
 * 
 */
function sab_migration_update_7031() {
    node_delete(4493); // delete duplicated Volunteer Abroad
}
/** 
 * Adds IS Countries  
 */
function sab_migration_update_7032() {

    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'countries')
        ->execute()
        ->fetchField();

        db_set_active('nexus');

        $results = db_select('Country', 'c')
        ->fields('c', array('CountryId', 'Name', 'CountryCode'))
        ->execute()
        ->fetchAll();

        db_set_active();

        foreach($results as $k => $v){

            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->CountryId;
            $term->field_short_name[LANGUAGE_NONE][0]['value'] = $v->CountryCode;
            $term->field_legacy_url_fragment[LANGUAGE_NONE][0]['value'] = sab_migration_clean_url_segment($v->Name);
            $term->field_url_fragment[LANGUAGE_NONE][0]['value'] = sab_migration_clean_url_segment($v->Name);
            $term->name = $v->Name;
            $term->vid = $vid;

            taxonomy_term_save($term);

        }

        return t("Counties have been inserted.");

    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";

    }

}


/** 
 * Delete all Product List Nodes.
 */
function sab_migration_update_7033(&$sandbox)
{  
    // Use the sandbox to store the information needed to track progression.
    if (!isset($sandbox['progress']))
    {  

        $count = db_select('node', 'n')
              ->fields('n', array('nid'))
              ->orderBy('n.nid', 'ASC')
              ->condition('type', array('product_list'))
              ->condition('n.nid', array(4761, 4494, 13719, 13733, 4534, 4495), 'NOT IN')
              ->countQuery()
              ->execute()
              ->fetchField();

        // The count of nodes visited so far.
        $sandbox['progress'] = 0;
        // Total nodes that must be visited.
        $sandbox['max'] = $count;
        // A place to store messages during the run.
        $sandbox['messages'] = array();
        // Last node read via the query.
        $sandbox['current_node'] = 0;
    }

    // Process nodes by groups of 50.
    // When a group is processed, the batch update engine determines
    // whether it should continue processing in the same request or provide
    // progress feedback to the user and wait for the next request.
    $limit = 10;

    $results = db_select('node', 'n')
              ->fields('n', array('nid'))
              ->orderBy('n.nid', 'ASC')
              ->condition('type', array('product_list'))
              ->condition('n.nid', array(4761, 4494, 13719, 13733, 4534, 4495), 'NOT IN')
              ->condition('n.nid', $sandbox['current_node'], '>')
              ->range(0, $limit)
              ->execute()
              ->fetchAll();

    foreach ($results as $row) {

        node_delete($row->nid);

        // Update our progress information.
        $sandbox['progress']++;
        $sandbox['current_node'] = $row->nid;

    }

    // Set the "finished" status, to tell batch engine whether this function
    // needs to run again. If you set a float, this will indicate the progress
    // of the batch so the progress bar will update.
    $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max'])  ? TRUE  : ($sandbox['progress'] / $sandbox['max']);

    if ($sandbox['#finished'])
    {
        return t('Product List Nodes have been deleted.');
    }

}

/** 
 * Adds Missing IS Specialties 
 */
function  sab_migration_update_7034() {
	
    try{

        $vid = db_select('taxonomy_vocabulary', 'v')
        ->fields('v', array('vid'))
        ->condition('machine_name', 'specialties')
        ->execute()
        ->fetchField();
        
        $query = db_select('taxonomy_term_data', 'td');
        $query->join('field_data_field_external_id', 'e', 'e.entity_id = td.tid');
        $query->condition('e.entity_type', 'taxonomy_term')
            ->condition('e.bundle', 'specialties')
            ->fields('td')
            ->fields('e', array('field_external_id_value'))
            ->orderBy('e.field_external_id_value', 'ASC');
        $existing_specialties = $query->execute()->fetchAllAssoc('field_external_id_value');
		
        $query = db_select('taxonomy_term_data', 'td');
        $query->join('field_data_field_external_id', 'e', 'e.entity_id = td.tid');
        $query->condition('e.entity_type', 'taxonomy_term')
            ->condition('e.bundle', 'subjects')
            ->fields('td')
            ->fields('e', array('field_external_id_value'))
            ->orderBy('e.field_external_id_value', 'ASC');
        $subjects = $query->execute()->fetchAllAssoc('field_external_id_value');
		
        db_set_active('nexus');
		
        //Specialties from Nexus DB
        $query = db_select('Specialty', 'sp');
        $query->join('SubjectSpecialty', 'ss', 'sp.SpecialtyId = ss.SpecialtyId');
        $query->join('Subject', 's', 's.SubjectId = ss.SubjectId');
        $query->condition('ss.applicationid', 2)
            ->condition('ss.isenabled', 1)
            ->condition('sp.isenabled', 1)
            ->condition('sp.SpecialtyId', array_keys($existing_specialties), 'NOT IN')
            ->fields('sp',array('SpecialtyName', 'SpecialtyId'))
            ->fields('ss',array('SubjectId'))
            ->fields('s',array('SubjectName'));
        $results = $query->execute()->fetchAll();
		
        db_set_active();
		
        foreach($results as $k => $v){
			
            $term = new stdclass;
                    
            $term = new stdclass();
            $term->field_external_id[LANGUAGE_NONE][0]['value'] = $v->SpecialtyId;
            $term->name = $v->SpecialtyName;
            $term->description = 'Missing from original import.';
            $term->vid = $vid;
            $term->field_subject_tr[LANGUAGE_NONE][]['tid'] = $subjects[$v->SubjectId]->tid;
                
            taxonomy_term_save($term);

        }

        return t("Missing Specialties have been inserted.");
        
    }
    catch(Exception $e){

        db_set_active();
        dpm($e);
        throw new Exception();
        return "There was an issue inserting these records.";
        
    }

}