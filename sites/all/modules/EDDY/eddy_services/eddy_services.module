<?php

/**
 * Returns a list from Matching Engine.
 * @param Array Options (Requires at least an empty array())
 *  array(
 *  'type' => array() ProgramType List,
 *  'campus_type' => array() Campus Type List (Only 1 is currently supported),
 *  'level' => array() Level List,
 *  'category' => array() Category List,
 *  'subject' => array() Subject List,
 *  'specialty' => array() Specialty List,
 *  'city' => array() City List,
 *  'state' => array() State List,
 *  'country' => array() Country List,
 *  'institution' => array() Institution List,
 *  'program' => array() Program List,
 *  'campus' => array() Campus List,
 *  'duration' => array() Duration List
 *  'work_type' => array() Work Type List
 *  'term' => array() Term List,
 *  'teach_abroad_type' => array() Teach Abroad Type List,
 *  'placement_audience' => array() Placement Audience List,
 *  'language' => array() Language List,
 *  'results_count' => Number of Restults,
 *  'nested_results_count' => Nested Program Results,
 *  'include_images' => FALSE will not get back image list,
 *  'page' => Which page index you are on,
 *  'sort_method' => 0 for Alphabetical and 1 for SRA,
 *  'remove_capped' => TRUE will prevent capped listings from appearing,
 *  'geo_target' => array(),
 *  'track_id' => Overwrite the default trackid,
 *  'featured_id' => Featured List ID,
 *  'show_nested_campuses' => For Institutions method only. Allows the Institution List to have a Nested Campus List,
 *  'use_beta' => Overwrite the state. This can be used if the beta service needs to be called for a sync job or something.,
 *  'clicks_only' => Return Clicks Only Restults.
 *  'group_by_level' => Return a list that is Grouped by Program Level.
 *  'device' => For SRA Tracking. Does not normally need to be passed.
 *  'application_id' => Pass a different ApplicationId than the one set in EDDY Tracking.
 *  'sf_product_codes' => array() A list of INTs for the following Product Codes:
 *          1 = SAB_PROFILE
 *          2 = SAB_CPL
 *          3 = SAB_TOP
 *          4 = SAB_MS
 *          5 = SAB_HB
 *          6 = SAB_SL
 *  );
 * @param String Service Method "GetInstitutions", "GetPrograms", "GetCampuses" (Required)
 * @param Array Cache Options (Optional)
 */
function eddy_services_get_listings($options, $method, $cache = array()){

	$output = null;

	if(variable_get('eddy_core_track_id') == null){
		drupal_set_message(eddy_services_get_errors(), 'error');
	}
	else{

		// Merge in defaults.
		$options += array(
		  'type' => array(),
		  'campus_type' => array(),
		  'level' => array(),
		  'category' => array(),
		  'subject' => array(),
          'specialty' => array(),
          'city' => array(),
          'state' => array(),
          'country' => array(),
		  'institution' => array(),
		  'program' => array(),
		  'campus' => array(),
          'duration' => array(),
          'work_type' => array(),
          'term' => array(),
          'teach_abroad_type' => array(),
          'placement_audience' => array(),
          'language' => array(),
		  'results_count' => 0,
		  'nested_results_count' => 0,
		  'page' => 0,
		  'sort_method' => 1,
		  'remove_capped' => false,
		  'geo_target' => array(),
		  'track_id' => variable_get('eddy_core_track_id'),
		  'featured_id' => 0,
		  'show_nested_campuses' => false,
		  'use_beta' => false,
          'clicks_only' => false,
          'group_by_level' => false,
		  'device' => '',
          'application_id' => variable_get('eddy_core_application_id'),
          'include_images' => false,
          'sf_product_codes' => array(),
          'show_non_for_profit_list' => false,
		);

		if(eddy_core_is_beta() || $options['use_beta'])
			$endpoint = variable_get('beta_matching_service_endpoint');
		else
			$endpoint = variable_get('matching_service_endpoint');

		$url = $endpoint . $method;

		$request = array(
			"PageNumber" => $options["page"],
			"MaxResultsCount" => $options["results_count"],
			"ApplicationId" => $options["application_id"],
			"SortMethod" => $options["sort_method"],
		);

		$request["TrackGuid"] = $options["track_id"];

		if(!empty($options['device']))
		    $request["TrackingDeviceGuid"] = $options['device'];

        if($options["nested_results_count"] > 0)
		    $request["MaxNestedProgramCount"] = $options["nested_results_count"];

		if($options['remove_capped'])
            $request["RemoveInvalidEntities"] = TRUE;

        if($options['show_non_for_profit_list'])
            $request["IsNonProfit"] = TRUE;

		if($options['featured_id'] > 0)
			$request["FeatureId"] = $options['featured_id'];

		if(!empty($options['type']))
		    $request["ProgramTypeList"] = $options['type'];

		if(!empty($options['campus_type'][0])){

            if($options['campus_type'][0] == 3){
                $request["IsHybrid"] = TRUE;
            }else{
                $request["CampusType"] = $options['campus_type'][0];
            }

        }

		if(!empty($options['level']))
		    $request["ProgramLevelList"] = $options['level'];

		if(!empty($options['category']))
		    $request["CategoryList"] = $options['category'];

		if(!empty($options['subject']))
		    $request["SubjectList"] = $options['subject'];

        if(!empty($options['specialty']))
            $request["SpecialtyList"] = $options['specialty'];

		if(!empty($options['institution'])){
            $request["InstitutionId"] =  $options['institution'][0];
            $request["InstitutionIdList"] =  $options['institution'];
        }
		if(!empty($options['program'])){
            $request["ProgramId"] =  $options['program'][0];
            $request["ProgramIdList"] =  $options['program'];
        }
        if(!empty($options['campus']))
            $request["CampusList"] =  $options['campus'];

        if(!empty($options['duration']))
            $request["DurationList"] =  $options['duration'];

        if(!empty($options['work_type']))
            $request["WorkTypeList"] =  $options['work_type'];

        if(!empty($options['term']))
            $request["TermList"] =  $options['term'];

        if(!empty($options['teach_abroad_type']))
            $request["TeachAbroadTypeList"] =  $options['teach_abroad_type'];

        if(!empty($options['placement_audience']))
            $request["PlacementAudienceList"] =  $options['placement_audience'];

        if(!empty($options['language']))
            $request["LanguageList"] =  $options['language'];

		if(!empty($options["geo_target"])){

			if(!empty($options['geo_target']['postal_code']))
				$request["GeoTarget"]["PostalCode"] = $options['geo_target']['postal_code'];

			if(!empty($options['geo_target']['radius']))
				$request["GeoTarget"]["RadiusFromPostalCode"] = $options['geo_target']['radius'];
		}

        if(!empty($options['country']))
            $request["GeoTarget"]["CountryList"] = $options['country'];

        if(!empty($options['city']))
            $request["GeoTarget"]["CityList"] = $options['city'];

        if(!empty($options['state']))
            $request["GeoTarget"]["StateList"] = $options['state'];

        if($options['clicks_only'])
            $request["IncludeOnlyClickPrograms"] = TRUE;

        if($options['group_by_level'])
            $request["IncludeProgramGroupRollup"] = TRUE;

        if(!empty($options['include_images']))
            $request["IncludeImages"] =  $options['include_images'];

        if(!empty($options['sf_product_codes']))
            $request["SFProductCodes"] = $options['sf_product_codes'];

        $dmRequest["directoryMatchRequest"] = $request;

		if($method == "GetPrograms")
			$dmRequest["includeProgramDetail"] = TRUE;

		if($method == "GetInstitutions" && $options['show_nested_campuses'])
			$dmRequest["includeCampus"] = TRUE;

		$jsonRequest = json_encode($dmRequest);

		$httpOptions = array(
			'headers' => array(
				"Content-Type" => "application/json",
				"Accept" => "application/json; charset=utf-8",
			),
			'data' => $jsonRequest,
			'method' => 'POST'
		);

		$start_time = date('s') . substr((string)microtime(), 1, 7);

		$results = drupal_http_request($url, $httpOptions);

		$end_time = date('s') . substr((string)microtime(), 1, 7);

		if(!empty($results->data)){

			$output = json_decode($results->data);

            eddy_services_cache_set($output, $cache);

			$requestTime = ($end_time - $start_time);

			log_watchdog_message_slow_requests($requestTime, $method, $jsonRequest);

		}else{
			log_watchdog_message_bad_requests($method, $request, $jsonRequest);
		}

	}

	return $output;

}

/**
 * Returns Program Details from Matching Engine.
 * @param (Int) IS Program ID (Required)
 * @param (Int) IS Campus ID (Optional)
 * @param (String) TrackId
 * @param (Bool) Group Result By Program Level
 * @param (Array) Cache Options (Optional)
 */
function eddy_services_get_program_details($programId, $campusId = 0, $trackid ='', $group_by_level = FALSE, $cache = array()) {

	$output = new stdclass;

	if(variable_get('eddy_core_track_id') == null){
		drupal_set_message(eddy_services_get_errors(), 'error');
	}
	else{

		if(eddy_core_is_beta())
			$endpoint = variable_get('beta_matching_service_endpoint');
		else
			$endpoint = variable_get('matching_service_endpoint');

		$method = 'GetProgramDetails';

		$url = $endpoint . $method;

		$request["applicationId"] = variable_get('eddy_core_application_id');
		$request["programId"] = $programId;

        if($campusId > 0)
            $request["campusId"] = $campusId;

        if($group_by_level)
            $request["includeProgramGroupRollup"] = TRUE;

		if(!empty($trackid))
            $request["TrackGuid"] = $trackid;
        else
			$request["TrackGuid"] = variable_get('eddy_core_track_id');

		$jsonRequest = json_encode($request);

		$httpOptions = array(
			'headers' => array(
				"Content-Type" => "application/json",
				"Accept" => "application/json; charset=utf-8",
			),
			'data' => $jsonRequest,
			'method' => 'POST'
		);

		$start_time = date('s') . substr((string)microtime(), 1, 7);

		$results = drupal_http_request($url, $httpOptions);

		$end_time = date('s') . substr((string)microtime(), 1, 7);

		if(!empty($results->data)){

			$output = json_decode($results->data);

			eddy_services_cache_set($output, $cache);

			$requestTime = ($end_time - $start_time);

			log_watchdog_message_slow_requests($requestTime, $method, $jsonRequest);

		}else{
			log_watchdog_message_bad_requests($method, $request, $jsonRequest);
		}

	}

	return $output;

}

/**
 * Returns Institution Details from Matching Engine.
 * @param INT IS Institution Id (Required)
 * @param String TrackId
 * @param Array Cache Options (Optional)
 */
function eddy_services_get_institution_details($institutionId, $trackid = '', $cache = array()) {

	$output = new stdclass;

	if(variable_get('eddy_core_track_id') == null){
		drupal_set_message(eddy_services_get_errors(), 'error');
	}
	else{

		if(eddy_core_is_beta())
			$endpoint = variable_get('beta_matching_service_endpoint');
		else
			$endpoint = variable_get('matching_service_endpoint');

		$method = 'GetInstitutionDetails';

		$url = $endpoint . $method;

		$request["applicationId"] = variable_get('eddy_core_application_id');
		$request["institutionId"] = $institutionId;

        if(!empty($trackid))
            $request["TrackGuid"] = $trackid;
        else
			$request["TrackGuid"] = variable_get('eddy_core_track_id');

        $jsonRequest = json_encode($request);

		$httpOptions = array(
			'headers' => array(
				"Content-Type" => "application/json",
				"Accept" => "application/json; charset=utf-8",
			),
			'data' => $jsonRequest,
			'method' => 'POST'
		);

		$start_time = date('s') . substr((string)microtime(), 1, 7);

		$results = drupal_http_request($url, $httpOptions);

		$end_time = date('s') . substr((string)microtime(), 1, 7);

		if(!empty($results->data)){

			$output = json_decode($results->data);

			eddy_services_cache_set($output, $cache);

			$requestTime = ($end_time - $start_time);

			log_watchdog_message_slow_requests($requestTime, $method, $jsonRequest);

		}else{
			log_watchdog_message_bad_requests($method, $request, $jsonRequest);
		}

	}

	return $output;

}


/*
 * Sets cache in the desired cache table and for the desired duration.
 */
function eddy_services_cache_set($data, $options = array()){

	//Set Default Values
	$options += array(
		'cid' => '',
		'table' => 'cache',
		'duration' => '',
		'enabled' => FALSE,
	);

	//Allows other modules to set cache. The module must pass enabled = TRUE and it must be enabled in "EDDY Custom Site Settings."
	if(variable_get('eddy_services_cache_is_enabled') != null && $options['enabled']){
		$options['enabled'] = variable_get('eddy_services_cache_is_enabled');
	}else{
		$options['enabled'] = FALSE;
	}

	//If enabled for the site and by the request then cache is created.
	if($options['enabled'] && !empty($options['cid']))
		cache_set($options['cid'], $data, $options['table'], $options['duration']);

}


/**
 * Returns the message and link to use when certain things have not been enabled.
 */
function eddy_services_get_errors(){
	return 'No Service calls were made. Please add a "Default Track ID" ' . l('here.', 'admin/config/system/eddy-core-custom-site-settings');
}


/**
 * Sets Watchdog message for requests taking longer than 3 seconds.
 */
function log_watchdog_message_slow_requests($requestTime, $method, $jsonRequest){
	if($requestTime > 1){
		watchdog(
			'EDDY Services: Performance',
			"Call to \"$method\" took longer than 1 second. <br/>Total Time: %time <br/>Method: %method <br/>Request: <code>%request</code>",
			array(
				'%time' => $requestTime,
				'%method' => $method,
				'%request' => $jsonRequest
			),
			WATCHDOG_DEBUG,
			'none'
		);
	}
}


/**
 * Sets Watchdog message for bad service requests.
 */
function log_watchdog_message_bad_requests($method, $request, $jsonRequest){
	watchdog(
		'EDDY Services: Errors',
		"There was an error invoking \"$method\" from the Matching Engine Service.<br/>Method: %method <br/>Request: <code>%request</code>",
		array(
			'%method' => $method,
			'%request' => $jsonRequest
		),
		WATCHDOG_ERROR,
		'none'
	);
	dpm("There was an error invoking \"$method\" from the Matching Engine Service.");
	dpm($request);
}


/**
 * Implements hook_form_alter().
 */
function eddy_services_form_alter(&$form, &$form_state, $form_id) {

	if($form_id == 'eddy_core_custom_site_settings_form'){

		$form['service_cache_enabled'] = array(
		  '#type' => 'checkbox',
		  '#title' => t('Enable Service Caching'),
		  '#description' => t('When enabled, modules can cache Service Requests.'),
		  '#default_value' => variable_get('eddy_services_cache_is_enabled'),
		  '#weight'=> 13,
		);

		$form['track_id'] = array(
		  '#type' => 'textfield',
		  '#title' => t('Default Track ID'),
		  '#required' => TRUE,
		  '#description' => t('The Default Track Id to be used by all Service Requests. This is usually overwritten by the "_CampaignTrackID" cookie if EDDY Tracking is enabled.'),
		  '#default_value' => variable_get('eddy_core_track_id'),
		  '#size' => 100,
		  '#maxlength' => 128,
		  '#weight' => 14,
		);

		$form['#submit'][] = 'eddy_services_set_configuration';

	}
}


/**
 * Callback for Service Configuration.
 */
function eddy_services_set_configuration($form, &$form_state){

	variable_set('eddy_services_cache_is_enabled', $form_state['values']['service_cache_enabled']);
	variable_set('eddy_core_track_id', $form_state['values']['track_id']);

}