<?php

/**
 * Implements hook_boot().
 */
function eddy_tracking_boot(){
	
	//Far Future Expiration
	$future_expire = time() + (10 * 365 * 24 * 60 * 60);
	
	//Keeps beta pages from caching.
	$domain = $_SERVER['SERVER_NAME'];
	$segments = explode('.', $domain);
	
	//Keeps the Beta site from being cached.
	if($segments[0] == 'beta')
		$GLOBALS['conf']['cache'] = false;

	$getLower = array_change_key_case($_GET);
	
	$campaign_cookie_name = '_CampaignTrackID';
	
	//Adds the trackid on the Server side so it can be read immediately on page load.
	if(!empty($getLower['trackid']) && is_valid_guid($getLower['trackid'])){

		setcookie($campaign_cookie_name, $getLower['trackid'], null, '/');
        
	}
	//If there is no trackid in the URL and the cookie does not exist then the default SEO cookie will be used.
	else if (empty($_COOKIE[$campaign_cookie_name]) && variable_get('eddy_core_track_id') != null){
        
		if((variable_get('eddy_core_track_id_tv') != NULL && variable_get('eddy_core_track_id_tv') != "") && empty($_SERVER['HTTP_REFERER'])){
			setcookie($campaign_cookie_name, variable_get('eddy_core_track_id_tv'), null, '/');              
		}else{
			setcookie($campaign_cookie_name, variable_get('eddy_core_track_id'), null, '/');      
		}
		
	}
	
	//Adds the _Device Guid Cookie for SRA Testing.
	if (function_exists('com_create_guid') === true && empty($_COOKIE['_Device'])){

		setcookie('_Device', trim(com_create_guid(), '{}'), $future_expire, '/');
		
    }
	
}

/**
 * Implements hook_preprocess_html().
 */
function eddy_tracking_preprocess_html(&$variables){
	
	// Put IS tracking javascript on the page if IS tracking enabled
	if(variable_get('eddy_core_is_tracking_enabled')){
		
		if(variable_get('eddy_tracking_domain') != ""){
			
			$script = "var _etq=_etq||[];_etq.push(['_etPageView']);(function(d,t){var et=d.createElement(t);et.async=true;et.src='//" . variable_get('eddy_tracking_domain') . "/et.min.js';var s=d.getElementsByTagName(t)[0];s.parentNode.insertBefore(et,s)}(document,'script'));";
            
            if(file_exists("/" . drupal_get_path('module', 'eddy_tracking') . '/' . 'eddy_trackevents_' . variable_get('eddy_core_application_name','elearners') . '.js')){
                $script .= "(function(d,t){var et=d.createElement(t);et.async=true;et.src='//" . $_SERVER['SERVER_NAME'] . "/" . drupal_get_path('module', 'eddy_tracking') . '/' . 'eddy_trackevents_' . variable_get('eddy_core_application_name','elearners') . '.js' . "';var s=d.getElementsByTagName(t)[0];s.parentNode.insertBefore(et,s)}(document,'script'));";
            }
			drupal_add_js($script, array('type' => 'inline'));

		}
		
	}
	
	//Adds class to body for users that are viewing the beta site.
	if(get_current_state() == 'beta_')
		$variables['classes_array'][] = 'beta';
	else
		$variables['classes_array'][] = 'not-beta';

}

/**
 * Implements hook_form_alter().
 */
function eddy_tracking_form_alter(&$form, &$form_state, $form_id) {

	if($form_id == 'eddy_core_custom_site_settings_form'){
        
		$form['tracking_is_enabled'] = array(
			'#type' => 'checkbox',
			'#title' => t('Enable IS Tracking'),
			'#description' => t('Enabling IS tracking will put tracking javascript on the page. By read "_CampaignTrackID" from cookie to get GUID, and "_CampaignInfo" to get VendorId, ChannelId, and CMID'),
			'#default_value' => variable_get('eddy_core_is_tracking_enabled'),
			'#weight'=>5,
		);
		
		$form['prospect_is_enabled'] = array(
			'#type' => 'checkbox',
			'#title' => t('Enable IS Prospect Tracking'),
			'#description' => t('Enabling IS Prospect Tracking will enable tracking on items such as the newsletter signup.'),
			'#default_value' => variable_get('eddy_core_is_prospect_tracking_enabled'),
			'#weight'=>6,
		);
		
		$form['track_id_tv'] = array(
			'#type' => 'textfield',
			'#title' => t('TV Track ID'),
			'#required' => FALSE,
			'#description' => t('TV Track ID to be used when there is no referrer. You can retrieve this value in your module by using: <strong>variable_get(\'eddy_core_track_id_tv\');</strong>'),
			'#default_value' => variable_get('eddy_core_track_id_tv'),
			'#size' => 36,
			'#maxlength' => 50,
			'#weight' => 14,
		);
		
		$form['#submit'][] = 'saveTrackingSetting';
        
	}
    
    //Call Prospect Service and Submit Email if the Prospect field is set.
    if(!empty($form['submitted']['Prospect']['#value']) && $form['submitted']['Prospect']['#value'] == TRUE){
        
        $form['#submit'][] = '_insert_prospect_information';
        
    }
    
}

/**
 * A callback function for tracking settings.
 */
function saveTrackingSetting($form, &$form_state){
	variable_set('eddy_core_is_tracking_enabled', $form_state['values']['tracking_is_enabled']);
	variable_set('eddy_core_is_prospect_tracking_enabled', $form_state['values']['prospect_is_enabled']);
	variable_set('eddy_core_track_id_tv', $form_state['values']['track_id_tv']);
}

/**
 * Callback function to call Prospect Service.
 */
function _insert_prospect_information($form, &$form_state){

    if(!empty($form_state['input']['submitted']['Email']) && variable_get('prospect_service_endpoint') != null){
        
		//if Source doesn't setup in webform, "newsletter_signup" is the default one
        $prospect_source = "newsletter_signup";
        if(isset($form['submitted']['Source']['#value'])){
            $prospect_source = $form['submitted']['Source']['#value'];
        }
        try{
            
            $sc = new SoapClient(variable_get('prospect_service_endpoint') . '?wsdl');
            
            $prospect_request = array(
                'Address1',
                'Address2',
                'Age',
                'AltPhone',
                'City',
                'CountryID',
                'DateOfBirth',
                'DesiredStartDate',
                'EducationLevelID',
                'Email',
                'Employer',
                'EmploymentStatusID',
                'EnrollmentLikeliHoodId',
                'ExternalScore',
                'ExternalScoreType',
                'FirstName',
                'GraduationYear',
                'HasCreditsFromOutsideUS',
                'IsUsCitizen',
                'LastName',
                'MilitaryStatusID',
                'NeedsFinancialAid',
                'OtherPhone',
                'OtherPhoneTypeID',
                'Phone',
                'PhoneTypeID',
                'PostalCode',
                'PreferEmail',
                'PreferPhone',
                'PreferText',
                'PreferredContactTime',
                'PrefixID',
                'StateID'
            );

            $p = new stdclass;
            
            //If the field keys have the same names as above then they will be passed along to the prospect service.
            foreach($prospect_request as $item){
                
                if(!empty($form_state['input']['submitted'][$item])){
                    $p->{$item} = $form_state['input']['submitted'][$item];
                }
                
            }

            //$p->Email = $form_state['input']['submitted']['email'];
            
            $pf = new stdclass;
            $pf->TrackId = $_COOKIE['_CampaignTrackID'];
            
            if(isset($form['submitted']['ProspectFlowTypeId'])){
                $pf->ProspectFlowTypeId = $form['submitted']['ProspectFlowTypeId']['#value'];
            }else{
                $pf->ProspectFlowTypeId = 1;
            }
            
            $prospect = $sc->SaveProspect(
                array(
                    'Request' => array(
                        'Prospect' => $p, 
                        'ProspectFlowDetails' => $pf,
                    )
                )
            );
            
            if(!empty($prospect->SaveProspectResult->ProspectId)){
                
                $data = array(
                   array("Key" => "source", "Value" => $prospect_source),
                   array("Key" => "domain", "Value" => $_SERVER['SERVER_NAME']),
                   array("Key" => "applicationId", "Value" => variable_get('eddy_core_application_id')),
                   array("Key" => "trackid", "Value" => $pf->TrackId),
                );
                

                
                $additional_fields = array_diff_key($form_state['input']['submitted'],array_flip($prospect_request));
                
                //add additional fields that are not in the list of $prospect_request, exclude the fields that includes "exclude_"
                foreach($additional_fields as $field=>$value){
                    if(strpos($field, "exclude_") === false){
                        //check to see if we have array as a value. 
                        if(is_array ($value))
                        {
                            //we do so make the values a comma seprerated string so it can be serialized for the request 
                            $data[] = array("Key" => $field, "Value" => implode(",", $value));
                        }else{
                            $data[] = array("Key" => $field, "Value" => $value);
                        }
                    }
                }
                $ad = new stdclass();
                $ad->ProspectId = $prospect->SaveProspectResult->ProspectId;
                $ad->Email = $p->Email;
                $ad->DataDictionary = $data;
                
                $result = $sc->SaveProspectAdditionalData($ad);
                
                if(empty($result->SaveProspectAdditionalDataResult)){
                    
                    $message = "Prospect Service did not Save Additional Data correctly.";
                    watchdog("Prospect Service", $message, array(), WATCHDOG_ERROR);
                    dpm($message);
                    
                }
                
            }else{
                
                $message = "Prospect Service Did not return an ID.";
                watchdog("Prospect Service", $message, array(), WATCHDOG_ERROR);
                dpm($message);
                
            }

        }
        catch(Exception $e){
            
            watchdog("Prospect Service", $e, array(), WATCHDOG_ERROR);
            dpm($e);
            
        }

    }
	
}

/**
 * Validates Guid value.
 */
function is_valid_guid($guid){
	
	return (preg_match('/^\{?[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}\}?$/', strtoupper($guid))) ? true : false;
	
}