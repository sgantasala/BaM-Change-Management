<?php

/**
 * Implements hook_menu().
 */
function sab_redirects_menu() {

  $items['programs/%'] = array(
      'page callback' => 'sab_listing_redirect',
      'access callback' => TRUE
  );

  $items['studypackages/%'] = array(
      'page callback' => 'sab_listing_redirect',
      'access callback' => TRUE
  );

  $items['articles/%'] = array(
      'page callback' => 'sab_articles_redirect',
      'access callback' => TRUE
  );

  $items['b/%'] = array(
      'page callback' => 'sab_blogs_redirect',
      'access callback' => TRUE
  );

  return $items;

}


function sab_redirects_page_alter($page){

    if(drupal_get_http_header('Status') == '404 Not Found'){
    
        $segments = explode('/', current_path());

        #region product_list/123 and node/123 redirects.

        //Redirects any 404 that has a valid Product List Id in the URL.
        if(in_array('product_list', $segments)){
            
            $product_list_key = array_search('product_list', $segments);

            $product_list_id_key = $product_list_key + 1;

            if(!empty($segments[$product_list_id_key]) && is_numeric($segments[$product_list_id_key])){

                $product_list = get_product_list_info_by_plid($segments[$product_list_id_key]);

                if($product_list->plid > 0){

                    $product_list_path = product_list_url($product_list);

                    if(!empty($product_list_path)){

                        sab_redirects_drupal_goto($product_list_path);

                    }

                }

            }
            
        }

        //Redirects any 404 that has a valid Node in the URL.
        if(in_array('node', $segments)){
            
            $node_list_key = array_search('node', $segments);

            $node_list_id_key = $node_list_key + 1;

            if(!empty($segments[$node_list_id_key]) && is_numeric($segments[$node_list_id_key])){

                $node = node_load($segments[$node_list_id_key]);

                if(isset($node->nid)){

                    sab_redirects_drupal_goto("node/$node->nid");

                }

            }
            
        }

        #endregion

        $has_in_dash = FALSE;
        foreach($segments as $k => $v){

            if(preg_match('/^in-/', $v) || preg_match('/-in-/', $v) || preg_match('/-worldwide/', $v)){
                $has_in_dash = TRUE;
                break;
            }

        }

        $in_list = array();
        foreach($segments as $k => $v){

            if(in_array($v, $in_list)){
                unset($segments[$k]);
            }

            //Removes Worldwide only if a country is already in the URL.
            $remove_program_type_fragments = array(
                'worldwide', 
                'intensive-language-worldwide', 
                'internships-worldwide', 
                'volunteer-worldwide', 
                'tefl-courses-worldwide', 
                'full-degree-worldwide'
            );

            if($has_in_dash && in_array($v, $remove_program_type_fragments)){
                unset($segments[$k]);
            }

            $in_list[] = $v;

        }

        if(!empty($segments)){

            $redirect = implode('/', $segments);

            $source = drupal_lookup_path('source', $redirect);

            if(!empty($source)){

                sab_redirects_drupal_goto($redirect);

            }

        }


    }

}


//Created New Function Because drupal_go_to was not working in hook_page_alter.
function sab_redirects_drupal_goto($path = '', array $options = array()) {

    $url = url($path, $options);

    header('Location: ' . $url, TRUE, 301);

    // The "Location" header sends a redirect status code to the HTTP daemon. In
    // some cases this can be wrong, so we make sure none of the code below the
    // drupal_goto() call gets executed upon redirection.
    drupal_exit($url);

}


/**
 * Implements hook_menu_get_item_alter().
 */
function sab_redirects_menu_get_item_alter(&$router_item, $path) {


    if(in_array($router_item['path'], array('blogs', 'resources', 'reviews')) && arg(1) != NULL){

        $router_item['page_callback'] = "drupal_not_found"; 
    
    }


}


/**
 * hook Menu callback function for Legacy /b/ pages.
 */
function sab_blogs_redirect(){

    drupal_goto('blogs', array(), 301);    

}

/**
 * hook Menu callback function for Legacy Article Pages.
 */
function sab_articles_redirect(){

    $alias = str_replace('.aspx', '', request_path());
    $alias = str_replace('articles/', 'resources/', $alias);

    $article_url = drupal_lookup_path('source', $alias);

    if(!empty($article_url)){
        
        drupal_goto($alias, array(), 301);
    
    }else{
    
        return drupal_not_found();

    }

}


/**
 * hook Menu callback function for Legacy Listings pages.
 */
function sab_listing_redirect() {

    try{

        $url = str_replace('/default.aspx', '',strtolower(request_path()));
        
        $slash_segments = explode('/', $url);

        array_shift($slash_segments);

        //Program Details Redirects
        if(preg_match('/.aspx/', $url) && isset($slash_segments[0])){

            $program_id = db_select('eddy_legacy_program_redirects', 'p')
               ->fields('p', array('is_id'))
               ->condition('legacy_url', str_replace('.aspx', '', $slash_segments[0]))
               ->execute()
               ->fetchField();

            if(is_numeric($program_id)){
                
                $program_details = eddy_services_get_program_details($program_id);

                if(isset($program_details->GetProgramDetailsResult->ProgramDetails)){

                    $program_url = sab_program_details_create_url('institutions', $program_details->GetProgramDetailsResult->ProgramDetails);

                    if(!empty($program_url)){

                        drupal_goto($program_url, array(), 301);

                    }

                }

            }

        }

        $url_segments = array();
        foreach($slash_segments as $k => $v){
            
            $url_segments[] = explode(',', $v);

        }

        if(!empty($url_segments)){

            $results = db_select('field_data_field_legacy_url_fragment', 'f')
            ->fields('f')
            ->condition('field_legacy_url_fragment_value', $url_segments, 'in')
            ->execute()
            ->fetchAllAssoc('entity_id');

            if(!empty($results)){

                $terms = taxonomy_term_load_multiple(array_keys($results));

                $allowed_qs = sab_listing_get_allowed_query_strings();

                //Adds Study Abroad Program Type if there is no Program Type.
                $has_type = FALSE;
                $program_type_tid = 0;
                foreach($terms as $k => $v){
                    
                    if($v->vocabulary_machine_name == 'program_types'){
                        $program_type_tid = $v->tid;
                        $has_type = TRUE;
                    }

                }

                $has_level = FALSE;
                foreach($terms as $k => $v){
                    
                    if($v->vocabulary_machine_name == 'levels') $has_level = TRUE;
                    
                }

                if(!$has_type){ 

                    $terms[6438] = taxonomy_term_load(6438); 
                    $program_type_tid = $terms[6438]->tid;
                   
                }

                if(in_array(6438, array_keys($terms)) && !$has_level){

                    $terms[6766] = taxonomy_term_load(6766);

                }

                $options = array();

                //Adds Duration Query String
                foreach($terms as $k => $v){

                    $name = sab_listing_create_safe_name($v->name);
                    
                    if($v->vocabulary_machine_name == 'durations' && in_array($name, array_keys($allowed_qs['durations']))){

                        $options['query']['duration'] = $name;
                        unset($terms[$k]);

                    }
                    
                }

                //Adds Work Type Query String for intensive languages
                if($program_type_tid == 6441){

                    foreach($terms as $k => $v){

                        $name = sab_listing_create_safe_name($v->name);

                        if($v->vocabulary_machine_name == 'work_types' && in_array($name, array_keys($allowed_qs['work_types']))){

                            $options['query']['work_type'] = $name;
                            unset($terms[$k]);

                        }
                        
                    }
                    
                //Otherwise we remove it from the term list.
                }else{ 

                    foreach($terms as $k => $v){

                        if($v->vocabulary_machine_name == 'work_types'){
                            
                            unset($terms[$k]);

                        }
                        
                    }
                
                }

                //Removes Specialties for types that do nto have any. Only "Study Abroad" and "Full Degree" have them.
                if(!in_array($program_type_tid, array(6437, 6438))){

                    foreach($terms as $k => $v){
                    
                        if($v->vocabulary_machine_name == 'specialties'){
                        
                            unset($terms[$k]);

                        }

                    }

                }

                //Remove IS Terms that are not in "Study Abroad" and "Intern Abroad."
                if(!in_array($program_type_tid, array(6438, 6441))){

                    foreach($terms as $k => $v){
                        
                        if($v->vocabulary_machine_name == 'terms'){
                            
                            unset($terms[$k]);

                        }

                    }

                }

                //Creates Level Query String for Full Degree Pages only.
                //http://www.studyabroad.local/programs/full+degree+abroad/associate/default.aspx
                if($program_type_tid == 6437 && $has_level){

                    //Adds Duration as a Query String
                    foreach($terms as $k => $v){

                        $name = sab_listing_create_safe_name($v->name);
                        
                        if($v->vocabulary_machine_name == 'levels' && in_array($name, array_keys($allowed_qs['levels']))){

                            $options['query']['level'] = $name;
                            unset($terms[$k]);

                        }
                    
                    }

                }

                //Remove China if both China and Hong kong are present.
                if(in_array(6826, array_keys($terms)) && in_array(6874, array_keys($terms))){
                    unset($terms[6826]);
                }

                $country_tid = 0;
                $country_term = new stdClass;
                $has_country = FALSE;

                //Check to see if there is a Coutry TID
                foreach($terms as $k => $v){

                    if($v->vocabulary_machine_name == 'countries'){

                        $has_country = TRUE;
                        $country_tid = $k;
                        $country_term = $v;
                        break;

                    }
                    
                }

                //Removes any City that has the same name as a Country.
                foreach($terms as $k => $v){
                    
                    if($v->vocabulary_machine_name == 'cities'){

                        if(isset($country_term->name) && $country_term->name == $v->name){
                            unset($terms[$k]);
                        }

                    }
                    
                }

                #region Removes Cities which do not have the right country mapping.
                $city_count = 0;
                foreach($terms as $k => $v){
                
                    if($v->vocabulary_machine_name == 'cities'){
                        $city_count++;
                    }
                
                }

                if($city_count > 0 ){

                    $removed_cities = array();
                    if($has_country){

                        foreach($terms as $k => $v){
                            
                            $city_country_tid = (!empty($v->field_country_tr[LANGUAGE_NONE][0]['tid'])) ? $v->field_country_tr[LANGUAGE_NONE][0]['tid'] : 0;

                            if($v->vocabulary_machine_name == 'cities' && $city_country_tid != $country_tid){
                                $removed_cities[] = $k;
                            }
                            
                        }
                        
                    }

                    //Remove Cities that do map to the Country.
                    if($city_count > count($removed_cities)){
                        
                        foreach($removed_cities as $v){

                            unset($terms[$v]);

                        }

                        //If All Cities need to be removed because the country is invalid then remove the country.
                    }else if($city_count == count($removed_cities) && isset($terms[$country_tid])) {
                        
                        unset($terms[$country_tid]);
                        $has_country = FALSE;
                        
                    }

                }
                #endregion


                #region Unsets City Term and Gets Valid Country if it is not present.
                $city_term = new stdClass;

                $count = 0;
                foreach($terms as $k => $v){
                    
                    if($v->vocabulary_machine_name == 'cities'){

                        if($count == 0){
                            $city_term = $terms[$k];
                        }

                        unset($terms[$k]);

                        if(!$has_country){

                            $query = db_select('taxonomy_term_data', 't');
                            $query->join("field_data_field_country_tr", "c", "c.entity_id = t.tid and c.bundle = 'cities' and c.entity_type = 'taxonomy_term'");
                            $query->fields('c', array('field_country_tr_tid'));
                            $query->condition('tid', $city_term->tid);
                            $tid = $query->execute()->fetchField();

                            if(is_numeric($tid)){
                                $terms[$tid] = taxonomy_term_load($tid);
                                $country_tid = $tid;
                                $has_country = TRUE;
                            }

                        }

                        $count++;

                    }

                }
                #endregion

                #region Map Continents to best Matching Country
                if(!$has_country){

                    //Europe -> England
                    //Oceania -> Australia
                    //Asia -> China
                    //Africa -> South Africa
                    //South America -> Argentina
                    //North America -> Mexico
                    //Middle East -> United Arab Emirates

                    foreach($url_segments as $v){

                        foreach($v as $sv){
                            
                            switch($sv){

                                case 'europe':

                                    $terms[7145] = taxonomy_term_load(7145);
                                    $has_country = TRUE;
                                    break;

                                case 'oceania':

                                    $terms[6791] = taxonomy_term_load(6791);
                                    $has_country = TRUE;
                                    break;

                                case 'asia':

                                    $terms[6826] = taxonomy_term_load(6826);
                                    $has_country = TRUE;
                                    break;

                                case 'africa':

                                    $terms[7026] = taxonomy_term_load(7026);
                                    $has_country = TRUE;
                                    break;

                                case 'south america':

                                    $terms[6788] = taxonomy_term_load(6788);
                                    $has_country = TRUE;
                                    break;

                                case 'north america':

                                    $terms[6936] = taxonomy_term_load(6936);
                                    $has_country = TRUE;
                                    break;

                                case 'middle east':

                                    $terms[6779] = taxonomy_term_load(6779);
                                    $has_country = TRUE;
                                    break;


                            }

                        }

                    }

                }
                #endregion

                //Remove Terms with the same VIDs.
                $term_vid_list = array();
                foreach($terms as $k => $v){
                
                    if(in_array($v->vid, $term_vid_list)){
                    
                        unset($terms[$k]);

                    }else{
                    
                        $term_vid_list[] = $v->vid;

                    }

                }

                //Builds Select Query to get the Matching PLID.
                $buildquery = "SELECT m.plid FROM {eddy_product_list} p\n";
                $buildquery .= "JOIN {eddy_product_list_taxonomy_term_mapping} m ON p.plid = m.plid\n";

                $count = 1;
                foreach($terms as $k => $v){
                    $buildquery .= "JOIN {eddy_product_list_taxonomy_term_mapping} m$count ON p.plid = m$count.plid AND m$count.tid = $k\n";
                    $count++;
                }

                $buildquery .= "GROUP BY m.plid\n";
                $buildquery .= "HAVING COUNT(m.plid) = " . count($terms);

                $plid = db_query($buildquery)->fetchField();

                if(!empty($plid)){

                    $product_list = get_product_list_info_by_plid($plid);

                    //Handles City Nodes or terms.
                    if(isset($city_term->tid) && isset($product_list->plid)){

                        $query = db_select('node', 'n');
                        $query->join("field_data_field_plid", "p", "p.entity_id = n.nid and p.bundle = 'city' and p.entity_type = 'node'");
                        $query->join("field_data_field_city_tr", "ct", "ct.entity_id = n.nid and ct.bundle = 'city' and ct.entity_type = 'node'");
                        $query->fields('n', array('nid'));
                        $query->condition('field_plid_value', $plid);
                        $query->condition('field_city_tr_tid', $city_term->tid);
                        $nid = $query->execute()->fetchField();

                        if(is_numeric($nid)){

                            if(isset($options['query']['in'])) unset($options['query']['in']);
                            drupal_goto("node/$nid", $options, 301);

                        }else{

                            if($has_country){
                                $options['query']['in'] = sab_listing_create_safe_name($city_term->name);
                            }

                        }

                    }

                    $url = product_list_url($product_list);

                    drupal_goto($url, $options, 301);

                }

            }

        }

        //Catchall is Study Abroad Worldwide.
        drupal_goto('node/4761', array(), 301);

    }catch(Exception $e){

        if(module_exists('devel')){
            dpm($e);
        }

        return "";

    }

}

/**
 * Implements hook_install().
 */
function sab_redirects_install(){

    //Sets The Legacy Fragmenet for all Legacy Specialties.
    $specialties = array();

    if (($handle = fopen($_SERVER['APPL_PHYSICAL_PATH'] . drupal_get_path('module', 'sab_redirects') . "/Specialties.csv", "r")) !== FALSE) {
		
		//Remove First Line from CSV:
		fgetcsv($handle, 1000, ",");
		
		//Adds Everything else except the first line.
		while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {

            if(!empty($data[1])){
                $specialties[] = array('is' => $data[0], 'legacy' => $data[1]);
            }

        }

    }

    foreach($specialties as $k => $v){
        
        $tid = db_select('taxonomy_term_data', 't')
        ->fields('t', array('tid'))
        ->condition('name', $v['is'])
        ->condition('vid', 25)
        ->execute()
        ->fetchField();

        if(!empty($tid)){
            $term = taxonomy_term_load($tid);
            $term->field_legacy_url_fragment[LANGUAGE_NONE][]['value'] = strtolower($v['legacy']);
            taxonomy_term_save($term);
        }

    }

    //Sets The Legacy Fragmenet for all other Terms that need it.
    $q = db_select('taxonomy_term_data', 't');
    $q->leftJoin('taxonomy_vocabulary', 'v', 'v.vid = t.vid');
    $q->fields('t', array('tid'))
        ->fields('v', array('machine_name'))
        ->condition('v.machine_name', array('tags', 'categories', 'subjects', 'specialties', 'campus_types', 'article_categories'), 'NOT IN');
    $tids = $q->execute()->fetchAllAssoc('tid');

    foreach($tids as $k => $v){

        $term = taxonomy_term_load($k);
        $term->field_legacy_url_fragment[LANGUAGE_NONE][]['value'] = strtolower($term->name);
        taxonomy_term_save($term);

    }

    drupal_set_message("Legacy Fragmenets have been added to all relevant Terms.");

}