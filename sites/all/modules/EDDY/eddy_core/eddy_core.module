<?php

/**
 * Implements hook_help().
 */
function eddy_core_help($path, $arg) {
	switch ($path) {
        case 'admin/help#eddy_core_custom_side_settings':
            $output = '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Additional Metadata allowing Education Dynamics Web Poperty to be tied to the <strong>IS</strong> system. Below are directions on how to use these variables in your module.') . '</p>';
            $output .= '<h3>' . t('Directions and Usage') . '</h3>';
            $output .= '<table class="sticky-enabled table-select-processed"><thead><th>Description</th><th>Function</th></thead><tbody>';
            $output .= '<tr class="odd"><td>' . t('<strong>Application ID:</strong></td><td><code>variable_get(\'eddy_core_application_id\');</code>') . '</td></tr>';
            $output .= '<tr class="even"><td>' . t('<strong>Application Machine Name:</strong></td><td><code>variable_get(\'eddy_core_application_name\');</code>') . '</td></tr>';
            $output .= '<tr class="odd"><td>' . t('<strong>Global Campaign ID:</strong></td><td><code>variable_get(\'eddy_core_global_campaign_id\');</code>') . '</td></tr>';
            $output .= '<tr class="even"><td>' . t('<strong>Beta is availible:</strong></td><td><code>variable_get(\'eddy_core_beta_is_enabled\');</code>') . '</td></tr>';
            $output .= '</tbody></table>';
            return $output;
	}
}

/**
 * Implements hook_init().
 */
function eddy_core_init() {

    // jquery.cookie plugin is not being loaded for anonymous users
    // causing all jQuery and Javascript to break on the site.
    drupal_add_library('system', 'jquery.cookie');

    drupal_add_js(array('cache_qs' => variable_get("css_js_query_string")), 'setting');

}

/**
 * Implements hook_boot().
 */
function eddy_core_boot() {

    ////Redirect URLs that have Double Slashes and do not match
    if(isset($_SERVER['UNENCODED_URL']) && preg_match("/\/\//", $_SERVER['UNENCODED_URL']) && $_SERVER['UNENCODED_URL'] != request_uri()){

        header("Location: /" . ltrim(request_uri(), '/'),TRUE,301);

    }

}

/**
 * Implements hook_menu().
 */
function eddy_core_menu() {
    $items['admin/config/system/eddy-core-custom-site-settings'] = array(
      'title' => 'EDDY Custom Site Settings',
      'description' => 'Additional site settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_core_custom_site_settings_form'),
      'access arguments' => array('administer_eddy_core_custom_site_settings'),
      'file' => 'eddy_core_custom_site_settings.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    );
    $items['<none>'] = array(
      'page callback' => 'drupal_not_found',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function eddy_core_permission() {
    return array(
      'administer_eddy_core_custom_site_settings' => array(
        'title' => 'Administer custom site settings.'
      ),
      'eddy_code_field_access' => array(
        'title' => 'Adminster Certain Fields for Certain Content Types'
      ),
    );
}

function eddy_core_token_info() {

    $types['eddy_core_tokens'] = array(
        'name' => t("Eddy Core Tokens"),
        'description' => t("Eddy Core Tokens."),
    );

    $eddy_core_tokens['subject_selection'] = array(
      'name' => t("Subject Selection"),
      'description' => t("Selected Category/Subject/Specialtiy - Lowest level."),
    );


    return array(
      'types' => $types,
      'tokens' => array(
        'eddy_core_tokens' => $eddy_core_tokens,
      ),
    );


}

/**
 * Implements hook_tokens().
 */
function eddy_core_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();

    if ($type == 'eddy_core_tokens') {

        foreach ($tokens as $name => $original) {

            switch ($name) {

                case 'subject_selection':

                    $selection = "";

                    if(!empty($data['node'])) {

                        //$selection = $data['node']->title;

                        if(!empty($data['node']->field_specialty_tr)){

                            $selection_term = taxonomy_term_load($data['node']->field_specialty_tr['und']['0']['tid']);
                        } else if(!empty($data['node']->field_subject_tr)) {

                            $selection_term = taxonomy_term_load($data['node']->field_subject_tr['und']['0']['tid']);
                        } else if (!empty($data['node']->field_category_tr)) {

                            $selection_term = taxonomy_term_load($data['node']->field_category_tr['und']['0']['tid']);
                        }

                        if(isset($selection_term)){

                            if(property_exists($selection_term,'name'))
                            {
                                $selection = $selection_term->name;
                            }

                        }
                    }

                    $replacements[$original] = $selection;

                    break;

            }
        }
    }

    // Return the replacements.
    return $replacements;
}

/**
 * Returns a string for with the current state of the site.
 * @return "beta_" or "".
 */
function get_current_state(){
	$domain = $_SERVER['SERVER_NAME'];
	$segments = explode('.', $domain);

	if ($segments[0] == 'beta')
		$current_state = "beta_";
	else
		$current_state = "";

	return $current_state;
}

/**
 * Boolean: Returns true if beta is in the first item in the SERVER NAME.
 * @return boolean
 */
function eddy_core_is_beta(){

	$domain = $_SERVER['SERVER_NAME'];
	$segments = explode('.', $domain);

	$output = FALSE;

	if ($segments[0] == 'beta')
		$output = TRUE;

	return $output;

}


/** String: Returns Base Content url.
 * @return String
 */
function get_base_content_url(){

	$base_content_url = variable_get('base_content_url');

    if(!isset($base_content_url)){

        $base_content_url = '//content.educationdynamics.com/';

    }else{

        $last_char =  substr($base_content_url,(strlen($base_content_url)-1),strlen($base_content_url));
        if(!($last_char == "/"))
        {
            $base_content_url = $base_content_url."/";
        }

    }

	return $base_content_url;

}

/**
/**
 * Get School Logos in your Module
 * @param $data         Std Class with InstitutionId, InstitutionName and CampusId
 * @param $link         The desired link for your logo (Optional)
 * @param $linkTitle    Text Which renders on the link's "title" atttribute (Optional)
 * @param $size         The desired Size of the logo (240,120,150) are supported. (150 Default) (Optional)
 * @return Link and Logo HTML.
 */
function get_school_logo($data, $link = "", $linkTitle = "", $size = "150", $height_width = TRUE, $link_options = array()) {
    $base_logo_url = get_base_content_url();


    $classes = array();
	switch($size){
		case 240:
			$logoFile = '/Logo_240x80.gif';
			$logoWidth = '240';
			$logoHeight = '80';
			break;
		case 120:
			$logoFile = '/Logo_120x40.png';
			$logoWidth = '120';
			$logoHeight = '40';
			break;
		case 150:
			$logoFile = '/Logo_150x50.gif';
			$logoWidth = '150';
			$logoHeight = '50';
			break;
		default:
			$logoFile = '/Logo_150x50.gif';
			$logoWidth = '150';
			$logoHeight = '50';
			break;
	}

	$logoPathId = $data->InstitutionId;
    if(isset($data->HasProgramLogo) && isset($data->ProgramId) && $data->HasProgramLogo){
        $logoPathId = $data->InstitutionId . '/Program/' . $data->ProgramId;
    }
    else if(isset($data->HasSchoolLogo) && isset($data->SchoolId) && $data->HasSchoolLogo){
		$logoPathId = $data->InstitutionId . '/School/' . $data->SchoolId;
    }
	else if(isset($data->HasCampusLogo) && $data->HasCampusLogo){
        $logoPathId = $data->InstitutionId . '/' . $data->CampusId;
    }else if(isset($data->ProgramCampus)){
        if(isset($data->ProgramCampus->HasCampusLogo) && $data->ProgramCampus->HasCampusLogo){
            $logoPathId = $data->InstitutionId . '/' . $data->CampusId;
        }
    }

	if(module_exists('cdn') && !module_exists('landing_page')){
		$logoURL = '/logo/' . $logoPathId . $logoFile;
	}else{
		$logoURL = $base_logo_url.'logo/' . $logoPathId . $logoFile;
	}

    //hotfix -- 82514
    $institutionName = "";
    if(isset($data->InstitutionName)){
        $institutionName = $data->InstitutionName;
    }
    $attributes = array(
        'src' =>   $logoURL,
        'alt' => $institutionName,
        'class' => array('eddy-logo', 'eddy-logo-' . $logoWidth . '-' . $logoHeight),
        'title' => $institutionName,
    );

    if($height_width){
        $attributes['width'] = $logoWidth;
        $attributes['height'] = $logoHeight;
    }

    if(!empty($link)) {

        $link_options += array(
          'attributes' => array(
            'title' => $linkTitle,
          ),
          'html' => TRUE,
        );

		$logo = l(('<img ' . drupal_attributes($attributes) . ' />'), trim($link, '/'), $link_options);

	}else{

		$logo = '<img ' . drupal_attributes($attributes) . ' />';

	}

	return $logo;

}

/**
 * Get the Beta vid for a particular node id.
 * @param $nid  The 'nid' for the particular node.
 * @return vid
 */
function get_node_beta_vid($nid){

	$vid = db_query('SELECT w.vid FROM {workbench_moderation_node_history} w WHERE w.is_current = 1 and state = \'beta\' and nid = :nid', array(':nid' => $nid))->fetchField();
	if(!empty($vid)) {
		return $vid;
	}

}

/**
 * Implements hook_node_access().
 */
function eddy_core_node_access($node, $op, $account) {
	if(get_current_state() == "beta_" && isset($node->type) && $node->type == 'school'){
		return NODE_ACCESS_ALLOW;
	}
}

/**
 * Implements hook_node_view_alter().
 */
function eddy_core_node_view_alter(&$build) {

    if(eddy_core_is_beta()){

        $node = $build['#node'];
        $nid = $node->nid;
        $vid = get_node_beta_vid($nid);
        $node = node_load($nid, $vid);

        if(node_is_page($node) && $node->type == 'school'){

            if(!empty($vid)){
                drupal_set_message('You are viewing the <strong>BETA</strong> version of this content. Please contact your <strong>Education Dynamics<sup style="font-size:.6em;">&reg;</sup></strong>, Account Manager to move this to our <strong>LIVE</strong> site.', 'warning');
            }

            if(!empty($build['body'])){
                $build['body'][0]['#markup'] = $node->body['und'][0]['value'];
            }

            foreach((array)$build as $index => $data) {
                if(strpos($index,'field_') !== false){
                    $field = array();
                    $field = $node->$index;
                    $build[$index][0]['#markup'] = $field['und'][0]['value'];
                }
            }

        }

    }

}

/**
 * Trims text by a specific word count.
 * @param $string    The string which needs to be shortened.
 * @param $count     The Desired word count which you would like to return.
 * @return String reduced by word count.
 */
function eddy_trim_text_by_word_count($string, $count){
    $string = strip_tags($string);
    $words = explode(' ', $string);

    if (!empty($words)){
        $output = array_slice($words,0,$count);
        $output = implode(' ', $output);
        return t($output);
    }
    else
        return false;

}


/**
 * Implementation of hook_form_FROM_ID_alter()
 * Description changed, added nolink and separator as path types.
 */
function eddy_core_form_menu_edit_item_alter(&$form, &$form_state) {
    // Some menu items have a pre-defined path which cannot be modified hence no default_value
    if (isset($form['link_path']['#default_value'])) {
        $default_value = $form['link_path']['#default_value'];

        if (preg_match('/^<none>\/[0-9]+$/', $default_value)) {
            $default_value = '<none>';
        }

        $form['link_path']['#default_value'] = $default_value;
        $form['link_path']['#description'] .=  ' ' . t('Enter "%nolink" to generate non-linkable item.', array('%nolink' => '<none>'));
    }
}


function eddy_core_menu_breadcrumb_alter(&$active_trail, $item){

    //Remove Breadcrumb item if it is not a link.
    foreach($active_trail as $k => $v){

        if(isset($v['link_path']) && $v['link_path'] == "<none>"){

            unset($active_trail[$k]);

        }

    }

}

/**
 * Implementation of hook_form_FROM_ID_alter()
 */
function eddy_core_form_node_form_alter(&$form, $form_state){

    if(!user_access('eddy_code_field_access')){

        //Disables Title for Certian Content Types
        $types = array('product_list', 'campus', 'school');
        $fields = array('title', 'field_type_tr', 'field_level_tr', 'field_category_tr', 'field_subject_tr', 'field_specialty_tr');

        if(in_array($form['#node']->type, $types)){

            $form['title']['#description'] = 'This field has been disabled for data integrety. There should be another field you can use to set a custom title.';
            //$form['title']['#attributes']['disabled'] = 'disabled';

            foreach($fields as $k => $v){

                $form[$v]['#disabled'] = TRUE;

            }

        }

    }

}

/**
 * Builds & Returns school logos
 * @param $data         Std Class with InstitutionId, InstitutionName and CampusId
 * @param $size         string desired Size of the logo (240,120,150) are supported. (150 Default) (Optional)
 * @param Array Options (Requires at least an empty array())
 *  array(
 *  'link' => The desired link for your logo (Optional),
 *  'linkTitle' => Text Which renders on the link's "title" atttribute (Optional),
 *  'height_width' => TRUE,
 *  'link_options' => array() Optional attributes rendered on the link,
 *  'attributes' => array() Optional attributes rendered on the image,
 * @return String and Logo HTML.
 */
function eddy_build_institution_logo($data, $size = "150", $options) {

    // Merge in defaults.
    $options += array(
      'link' => '',
      'linkTitle' => '',
      'height_width' => TRUE,
      'link_options' => array(),
      'attributes' => array(),
    );

    switch($size){
		case 240:
			$logoFile = '/Logo_240x80.gif';
			$logoWidth = '240';
			$logoHeight = '80';
			break;
		case 120:
			$logoFile = '/Logo_120x40.png';
			$logoWidth = '120';
			$logoHeight = '40';
			break;
		case 150:
			$logoFile = '/Logo_150x50.gif';
			$logoWidth = '150';
			$logoHeight = '50';
			break;
		default:
			$logoFile = '/Logo_150x50.gif';
			$logoWidth = '150';
			$logoHeight = '50';
			break;
	}

	$logoPathId = $data->InstitutionId;
    if(isset($data->HasProgramLogo) && isset($data->ProgramId) && $data->HasProgramLogo){
        $logoPathId = $data->InstitutionId . '/Program/' . $data->ProgramId;
    }
    else if(isset($data->HasSchoolLogo) && isset($data->SchoolId) && $data->HasSchoolLogo){
		$logoPathId = $data->InstitutionId . '/School/' . $data->SchoolId;
    }
	else if(isset($data->HasCampusLogo) && $data->HasCampusLogo){
        $logoPathId = $data->InstitutionId . '/' . $data->CampusId;
    }else if(isset($data->ProgramCampus)){
        if(isset($data->ProgramCampus->HasCampusLogo) && $data->ProgramCampus->HasCampusLogo){
            $logoPathId = $data->InstitutionId . '/' . $data->CampusId;
        }
    }

	if(module_exists('cdn') && !module_exists('landing_page')){
		$logoURL = '/logo/' . $logoPathId . $logoFile;
	}else{
		$logoURL = get_base_content_url() .'logo/' . $logoPathId . $logoFile;
	}

    $institutionName = (isset($data->InstitutionName)) ? $data->InstitutionName : "";
    $options['attributes'] += array(
        'src' => $logoURL,
        'alt' => $institutionName,
        'class' => array('eddy-logo', 'eddy-logo-' . $logoWidth . '-' . $logoHeight),
        'title' => $institutionName,
    );

    if($options['height_width'] == TRUE){
        $options['attributes']['width'] = $logoWidth;
        $options['attributes']['height'] = $logoHeight;
    }

    $logo = '<img ' . drupal_attributes($options['attributes']) . ' />';

    if(!empty($options['link'])) {

        $options['link_options'] += array(
          'attributes' => array(
            'title' => $options['linkTitle'],
          ),
          'html' => TRUE,
        );

		$logo = l($logo, trim($options['link'], '/'), $options['link_options']);
	}

	return $logo;

}
