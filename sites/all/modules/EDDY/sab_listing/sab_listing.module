<?php

define('SAB_LISTING_ALLOWED_QUERY_STRINGS_CACHE_KEY', 'sab_allow_query_strings_cache_key');

#region Adds new form fields to EDDY Listing

/**
 * Implements hook_form_alter().
 */
function sab_listing_form_alter(&$form, &$form_state, $form_id){

    if($form_id == 'eddy_listing_add_list' || $form_id == 'eddy_listing_edit_list'){

        $form['custom_program_types'] = array(
            '#type' => 'fieldset',
            '#title' => t("Custom Program Types"),
            '#description' => t('SAB Only: Select custom Program Types to Filter this listing.'),
            '#collapsible' => TRUE,	
        );

        $program_types = array();

        try{

            $q = db_select('taxonomy_term_data', 't');
            $q->fields('t', array('name'));
            $q->fields('e', array('field_external_id_value'));
            $q->join("field_data_field_external_id", "e", "t.tid = e.entity_id and e.entity_type = 'taxonomy_term' and e.bundle = 'program_types'");

            $results = $q->execute()->fetchAll();

            foreach($results as $result){
                
                $program_types[$result->field_external_id_value] = $result->name;
                
            }

        }
        catch(Exception $e){

            if(module_exists('devel')){
                
                dpm($e);
                
            }
            
        }

        $default_value = array();

        if(isset($form['#list']['id'])){
            
            $results = variable_get("sab_listing_program_types_" . $form['#list']['id']);

            if(!empty($results)){
            
                $default_value = $results; 
            
            }

        }

        $form['custom_program_types']['include_custom_program_types'] = array(
            '#type' => 'checkboxes',
            '#title' => t("Include Program Types"),
            '#options' => $program_types,
            '#default_value' => $default_value,
        );

    }

}


/**
 * Implements hook_eddy_listing_insert().
 */
function sab_listing_eddy_listing_insert($form, $form_state, $id){

    if(isset($form['custom_program_types']['include_custom_program_types']['#value'])){
        variable_set("sab_listing_program_types_" . $id, $form['custom_program_types']['include_custom_program_types']['#value']);
    }

}


/**
 * Implements hook_eddy_listing_update().
 */
function sab_listing_eddy_listing_update($form, $form_state, $id){

    if(isset($form['custom_program_types']['include_custom_program_types']['#value'])){
        variable_set("sab_listing_program_types_" . $id, $form['custom_program_types']['include_custom_program_types']['#value']);
    }

}


/**
 * Implements hook_eddy_listing_delete().
 */
function sab_listing_eddy_listing_delete($list){
    
    variable_del("sab_listing_program_types_" . $list['id']);

}

#endregion


/**
 * Returns the Logo Link for the SAB site.
 */
function sab_listing_logo_link($html, $details){

    $output = eddy_listing_request_link($html, $details);

    #region old Logic
    //switch($details->ProgramSFProductCode)
    //{
    //    //Flat Fee
    //    case 1:
    //    //CPL
    //    case 2:
    //        //dpm("CPL ".$details->ProgramSFProductCode);
    //        $output = eddy_listing_request_link($html, $details);
    //        break;
    //    //Top Tier
    //    case 3:
    //    //Master Sponsor
    //    case 4:
    //    //Hotbutton
    //    case 5:

    //        switch($details->PaidStatusTypeId)
    //        {
    //            //fraid
    //            case 2:
    //                $output = eddy_listing_request_link($html, $details);
    //                break;
    //            default:
    //                $output = eddy_listing_visit_link($html, $details);
    //                break;
    //        }
    //        break;

    //    //Textlink
    //    case 6:
    //        //dpm("Textlink");
    //        $output = eddy_listing_visit_link($details->InstitutionName, $details);
    //        break;
    //    default:
    //        //dpm("default");
    //        //dpm("Tier ".$details->ProgramSFProductCode);
    //        $output = eddy_listing_request_link($html, $details);
    //        break;
    //}
    #endregion

    if(sab_listing_show_visit_link($details)){

        //Show Text Link
        if($details->ProgramSFProductCode == 6){
                
            $output = eddy_listing_visit_link($details->InstitutionName, $details);
                
        }else{

            $output = eddy_listing_visit_link($html, $details);
                
        }

    }

    return $output;

}

/**
 * Returns the Logo Link for the Hybrid client.
 */
function sab_listing_details_logo_link($html, $details){
    
    $output = eddy_listing_visit_link($html, $details);

    return $output;

}

/**
 * Returns the Logo Link for the SAB site.
 */
function sab_listing_details_link($html, $details){

    $output = eddy_listing_details_link($html, $details);

    #region old Logic
    //switch($details->ProgramSFProductCode)
    //{
    //    //Flat Fee
    //    case 1:
    //    //CPL
    //    case 2:
    //        $output = eddy_listing_details_link($html, $details);
    //        break;
    //    //Top Tier
    //    case 3:
    //    //Master Sponsor
    //    case 4:
    //    //Hotbutton
    //    case 5:
    //        switch($details->PaidStatusTypeId)
    //        {
    //            //fraid
    //            case 2:
    //                $output = eddy_listing_request_link($html, $details);
    //                break;
    //            default:
    //                $output = eddy_listing_visit_link($html, $details);
    //                break;
    //        }
    //        break;
    //    //Textlink
    //    case 6:
    //        $output = eddy_listing_visit_link($html, $details);
    //        break;
    //    default:
    //        $output = eddy_listing_details_link($html, $details);
    //        break;
    //}
    #endregion

    if(sab_listing_show_visit_link($details)){

        $output = eddy_listing_visit_link($html, $details);
                
    }

    return $output;

}


/**
 * Returns true if the program can have a visit link. 
 */
function sab_listing_show_visit_link($details){

    if(
        !empty($details->ClickThroughUrl)
        && in_array($details->ProgramSFProductCode, array(3, 4, 5, 6)) 
        && !in_array($details->PaidStatusTypeId, array(1, 2))
    ){
        return true;

    }else{
        
        return false;
        
    }

}



/**
 * Returns the Logo URL for the SAB site.
 */
function sab_listing_logo_url($details){

    $output = eddy_listing_details_url($details);

    if(eddy_listing_show_visit_link($details)){

        $output = eddy_listing_request_url($details);

    }else if(eddy_listing_show_request_link($details)){

        $output = eddy_listing_request_url($details);

    }

    return $output;

}


/**
 * Implements hook_eddy_listing_list_request_alter().
 */
function sab_listing_eddy_listing_list_request_alter(&$options, $list_fields, $node){

    //Adds some filters to custom lists on the Program Details page
    if(isset($list_fields->machine_name) && in_array($list_fields->machine_name, array('program-details-more-programs', 'program-details-trending-programs'))){

        $program_details = sab_listing_get_program_details();
       
        if(isset($program_details->ProgramId)){
              
            //Updated to include Flat Fee and CPL
            $options['sf_product_codes'] = array(2,5,6); //1 = SAB_PROFILE,2 = SAB_CPL,3 = SAB_TOP,4 = SAB_MS,5 = SAB_HB,6 = SAB_SL
            if(!empty($program_details->SubjectList)){
                foreach($program_details->SubjectList as $k => $v){
                    $options['subject'][] = $v->ItemId;
                }
            }
            if(!empty($program_details->CategoryList)){
                foreach($program_details->CategoryList as $k => $v){
                    $options['category'][] = $v->ItemId;
                }
            }
            if(!empty($program_details->SpecialtyList)){
                foreach($program_details->SpecialtyList as $k => $v){
                    $options['specialty'][] = $v->ItemId;
                }
            }
            if(!empty($program_details->TermList)){
                foreach($program_details->TermList as $k => $v){
                    $options['term'][] = $v;
                }
            }
            if(!empty($program_details->TeachAbroadTypeList)){
                foreach($program_details->TeachAbroadTypeList as $k => $v){
                    $options['teach_abroad_type'][] = $v;
                }
            }
            if(!empty($program_details->WorkTypeList)){
                foreach($program_details->WorkTypeList as $k => $v){
                    $options['work_type'][] = $v;
                }
            }
         
             //Added Country Filter for Full Degree
            if(!empty($program_details->ProgramCampus->CountryName)){
                $countryid= sab_get_country_external_id($program_details->ProgramCampus->CountryName);
                $options['country'][] =$countryid;
           }

           //Added Country Filter for Non Full Degree
           if(!empty($program_details->ProgramAddressList)){
                foreach($program_details->ProgramAddressList as $k => $v){
                    $options['country'][] = $v->CountryId;
                }
           }
     
      
        }

  
    }


    //Added to make sure the Right Program Type gets passed. Level should be removed if it is not Program Type 4.
    $included_types = variable_get("sab_listing_program_types_" . $list_fields->id);

    if(count($included_types) > 0){

        if(!in_array(4, $included_types) && isset($options['level'])){
            
            unset($options['level']);
            
        }

        $options['type'] = array_keys($included_types);
        
    }


}
function sab_get_country_external_id($name)
{ 
    $output = array();

    try {

        $query = db_select('field_data_field_external_id', 'f');
		$query->join('taxonomy_term_data', 't', 'f.entity_id = t.tid');
		$query ->fields('f', array('field_external_id_value'));
		$query ->condition('f.bundle', 'countries');
		$query ->condition('t.name', $name);
     
        $results = $query->execute()->fetchAll();

        if(!empty($results)){

            foreach($results as $result){

                $value = new stdclass;
                $value->external_id = $result->field_external_id_value;
                $outpu[]= $value;

            }
        }
    
     }
    catch(Exception $e){

        dpm($e);
    }
   
    return $output;
}

function sab_listing_get_program_details()
{

    drupal_add_js(drupal_get_path('module', 'sab_listing') . "/scripts.js");
    $qs = array_change_key_case(drupal_get_query_parameters(), CASE_LOWER);

    $details = null;
    if(arg(0) == 'eddy-listing-ajax' && isset($qs["program_id"]) && is_numeric($qs["program_id"])){

        $details = sab_program_details_get_program_details($qs["program_id"]);

        //$ajax_refferer=$_SERVER['HTTP_REFERER'];

        //if(!empty($ajax_refferer)){

        //    $segments = explode('-', $ajax_refferer);
        //    if(!empty($segments)){
        //        $count_last = count($segments) - 1;
        //        if(!empty($segments)){
        //            $program_id = $segments[$count_last];
        //            if(!empty($program_id)){
        //                if(is_numeric($program_id)){
        //                    $details = sab_program_details_get_program_details($program_id);
        //                }
        //            }
        //        }
        //    }
        //}

    }
    else
    {

        if(isset(get_sab_program_details()->programDetails)){

            $current_program = get_sab_program_details()->programDetails;
            if(!empty($current_program)){
                $details = get_sab_program_details()->programDetails;
            }

        }

    }

    return $details;
}


/**
 * Implements hook_eddy_listing_list_result_alter().
 */
function sab_listing_eddy_listing_list_result_alter(&$list, $list_fields){

    $ids = array();

    foreach($list as $k => $v){

        //For When the listings response comes back with Nested Institutions under Campuses

        if(isset($v->InstitutionList)){

            foreach($v->InstitutionList as $c){

                $ids[] = $c->InstitutionId;

            }

        }
        else if(isset($v->InstitutionId)){

            $ids[] = $v->InstitutionId;

        }

    }

    if(module_exists('eddy_reviews') && function_exists('get_avg_ratings')){
        $list = get_avg_ratings($list);
    }

    if(!empty($ids)){

        $nodes = eddy_listing_get_nodes("institution", $ids);

        //Reindex the nodes with the IS id.
        foreach($nodes as $node) {

            foreach($node->field_external_id[LANGUAGE_NONE] as $k => $v){

                $nodes[$v['value']] = $node;

            }

        }

        sab_listing_merge_node_data($list, $nodes);

    }

}


/**
 * Adds Campus URL to the ProgramList Results (Recursive).
 */
function sab_listing_merge_node_data(&$list, $nodes){

    foreach($list as $k => $v){

        if(isset($v->InstitutionSFProductCodeList) && in_array('1', $v->InstitutionSFProductCodeList) == TRUE ) {

            $list[$k]->isFeaturedInstitution = TRUE;
        } else {

            $list[$k]->isFeaturedInstitution = FALSE;
        }
        if(isset($nodes[$v->InstitutionId])) {
            $list[$k]->institution_node = $nodes[$v->InstitutionId];
        }

    }

}


function sab_listing_eddy_listing_request_url_alter(&$output,&$details)
{
    $output = sab_program_details_create_url('institutions',$details);
    return $output;
}


function sab_listing_is_related_programs_visible()
{
    $is_visible = false;
    $menu_item = menu_get_item();

    if($menu_item["page_callback"] == "_sab_program_details" ){

        $program_details = get_sab_program_details();

        if(!empty($program_details)){
            $program_details = $program_details->programDetails;
            if( isset($program_details->PaidStatusTypeId)){
                if($program_details->PaidStatusTypeId == 1 ){
                    $is_visible = true;
                }
            }
        }
    }
    return $is_visible;
}


/**
 * Returns the Link for the Institution Details Page.
 */
function sab_listing_institution_details_link($link_text, $details, $link_options = array()) {

    $output = $link_text;

    if(isset($details->institution_node->nid) && isset($details->isFeaturedInstitution) && $details->isFeaturedInstitution == TRUE) {

        $url = url( drupal_get_path_alias('node/'.$details->institution_node->nid));

    }

    $link_options['html'] = true;

    if(!empty($url)){

        $output = l($link_text, $url, $link_options);

    }

    return $output;

}


/*
 *  Returns all the allowed Query String Values.
 */
function sab_listing_get_allowed_query_strings(){

    $output = array();

    if($data = cache_get(SAB_LISTING_ALLOWED_QUERY_STRINGS_CACHE_KEY)){

        $output = $data->data;

    }else{

        $output['durations'] = _sab_listing_get_allowed_names('durations');
        $output['work_types'] = _sab_listing_get_allowed_names('work_types');
        //$output['cities'] = _sab_listing_get_allowed_names('cities'); There will be too many.
        $output['levels'] = _sab_listing_get_allowed_names('levels');
        $output['terms'] = _sab_listing_get_allowed_names('terms');

        cache_set(SAB_LISTING_ALLOWED_QUERY_STRINGS_CACHE_KEY, $output);

    }

    return $output;

}


/*
 *  Returns Data keyed By Safe Name.
 */
function _sab_listing_get_allowed_names($bundle){

    $output = array();

    try {

        $q = db_select('taxonomy_term_data', 't');
        $q->join('field_data_field_external_id', 'e', "e.entity_id = t.tid and e.entity_type = 'taxonomy_term'");
        $q->condition('e.bundle', $bundle);
        $q->fields('t');
        $q->fields('e');
        $results = $q->execute()->fetchAll();

        if(!empty($results)){

            foreach($results as $result){

                $safe_name = sab_listing_create_safe_name($result->name);

                $value = new stdclass;
                $value->name = $result->name;
                $value->external_id = $result->field_external_id_value;
                $value->bundle = $bundle;
                $value->entity_type = 'taxonomy_term';
                $value->entity_id = $result->tid;

                $output[$safe_name] = $value;

            }

        }

    }
    catch(Exception $e){

        dpm($e);

    }

    return $output;

}


/**
 * Returns a String that has been transformed to lowercase and has had all special characters removed.
 */
function sab_listing_create_safe_name($string){

    $string = preg_replace("/[^a-zA-Z0-9\/_|+ -]/", '', $string);
	$string = strtolower(trim($string, '-'));
	$string = preg_replace("/[\/_|+ -]+/", '-', $string);
    return $string;

}