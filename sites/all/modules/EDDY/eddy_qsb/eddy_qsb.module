<?php

/**
 * @file
 * Allows administrators to customize the site's navigation menus.
 *
 * A menu (in this context) is a hierarchical collection of links, generally
 * used for navigation. This is not to be confused with the
 * @link menu Menu system @endlink of menu.inc and hook_menu(), which defines
 * page routing requests for Drupal, and also allows the defined page routing
 * URLs to be added to the main site navigation menu.
 */

/**
 * Maximum length of QSB name as entered by the user. Database length is 64
 * and we add a qsb- prefix.
 */


define('EDDY_QSB_TYPE_DEGREE', 'Degree');
define('EDDY_QSB_TYPE_CAMPUS', 'Campus');
define('EDDY_QSB_TYPE_CAREER', 'Career');

define('EDDY_QSB_DEGREE_QTYPE_LEVEL', 'EduLevel');
define('EDDY_QSB_DEGREE_QTYPE_CAT', 'Category');
define('EDDY_QSB_DEGREE_QTYPE_SUB', 'Subject');
define('EDDY_QSB_CAREER_QTYPE_INDU', 'Industry');
define('EDDY_QSB_CAREER_QTYPE_OCCU', 'Occupation');
define('EDDY_QSB_CAMPUS_QTYPE_STATE', 'State');
define('EDDY_QSB_CAMPUS_QTYPE_CITY', 'City');

define('EDDY_QSB_IMAGE_PATH', 'public://qsb/');


/**
 * Implements hook_help().
 */

function eddy_qsb_help($path, $arg) {
    switch ($path) {
        case 'admin/help#qsb':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('The QSB module provides an interface for managing QSBs blocks. A QSB is a collection of questions, which can be within or external to the site, generally used for navigation. Each QSB is rendered in a block that can be enabled and positioned through the <a href="@blocks">Blocks administration page</a>. You can view and manage QSBs on the <a href="@qsbs">QSBs administration page</a>. ', array('@blocks' => url('admin/structure/block'), '@qsbs' => url('admin/structure/qsb'), '@qsb' => 'http://drupal.org/handbook/modules/qsb/')) . '</p>';
            $output .= '<h3>' . t('Uses') . '</h3>';
            $output .= '<dl>';
            $output .= '<dt>' . t('Managing QSBs') . '</dt>';
            $output .= '<dd>' . t('Users with the <em>Administer QSBs and QSB questions</em> permission can add, edit and delete custom QSBs on the <a href="@qsb">QSBs administration page</a>. Custom QSBs can be Degree QSBs, Career QSBs, or Campus QSBs. You may create an unlimited number of additional QSBs, each of which will automatically have an associated block. By selecting <em>list questions</em>, you can add, edit, or delete questions for a given QSB. The questions listing page provides a drag-and-drop interface for controlling the order of questions.', array('@qsb' => url('admin/structure/qsb'), '@add-qsb' => url('admin/structure/qsb/add'))) . '</dd>';
            $output .= '<dt>' . t('Displaying QSBs') . '</dt>';
            $output .= '<dd>' . t('After you have created a QSB, you must enable and position the associated block on the <a href="@blocks">Blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
            $output .= '</dl>';
            return $output;
        case 'admin/structure/qsb/add':
            return '<p>' . t('You can enable the newly-created block for this QSB on the <a href="@blocks">Blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</p>';
    }
    if ($path == 'admin/structure/qsb' && module_exists('block')) {
        return '<p>' . t('Each QSB has a corresponding block that is managed on the <a href="@blocks">Blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</p>';
    }
}

/**
 * Implements hook_permission().
 */

function eddy_qsb_permission() {
    return array(
      'administer EDDY QSB' => array(
        'title' => t('Administer QSBs and QSB Interface'),
      ),

    );
}

/**
 * Implements hook_menu().
 */
function eddy_qsb_menu() {
    $items['admin/structure/qsb'] = array(
      'title' => 'Quick Search Builder',
      'description' => 'Add new QSB blocks to your site, edit existing QSBs, and rename and reorganize QSB questions.',
      'page callback' => 'qsb_overview_page',
      'access callback' => 'user_access',
      'access arguments' => array('administer EDDY QSB'),
      'file' => 'eddy_qsb_qsb.inc',
    );

    $items['admin/structure/qsb/add'] = array(
      'title' => 'Add a Quick Search',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_qsb_edit', 'add'),
      'access arguments' => array('administer EDDY QSB'),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'eddy_qsb_qsb.inc',
    );
    
    $items['admin/structure/qsb/manage/%qsb/questions/add'] = array(
      'title' => 'Create Questions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_questions_edit', 'add', 4),
      'access arguments' => array('administer EDDY QSB'),
      'file' => 'eddy_qsb_questions.inc',
    );
    
    $items['admin/structure/qsb/manage/%qsb/questions/edit'] = array(
      'title' => 'Edit Questions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_questions_edit', 'edit', 4),
      'access arguments' => array('administer EDDY QSB'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'eddy_qsb_questions.inc',	
    );
    
    $items['admin/structure/qsb/manage/%qsb/edit'] = array(
      'title' => 'Configure QSB',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_qsb_edit', 'edit', 4),
      'access arguments' => array('administer EDDY QSB'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'eddy_qsb_qsb.inc',
    );
    
    
    $items['admin/structure/qsb/manage/%qsb/delete'] = array(
      'title' => 'Delete QSB',
      'page callback' => 'eddy_qsb_delete_page',
      'page arguments' => array(4),
      'access arguments' => array('administer EDDY QSB'),
      'file' => 'eddy_qsb_qsb.inc',
    );

    $items['admin/structure/qsb/manage/%qsb/questions/delete'] = array(
      'title' => 'Delete QSB Questions',
      'page callback' => 'eddy_questions_delete_page',
      'page arguments' => array(4),
      'access arguments' => array('administer EDDY QSB'),
      'file' => 'eddy_qsb_questions.inc',
    );

    $items['admin/structure/qsb/manage/%qsb/style'] = array(
      'title' => 'QSB Style Setup',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('qsb_style_setup', 'add', 4),
      'access arguments' => array('administer EDDY QSB'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'eddy_qsb_preview.inc',
    );

    if(variable_get('eddy_core_application_name')!="elearners" && variable_get('eddy_core_application_name')!="earn_my_degree" && variable_get('eddy_core_application_name')!="gradschools"){
        $appName = "default";
    }else{
        $appName = variable_get('eddy_core_application_name');
    }
    
    //3 levels, and Degree is the first dropdown
    $items['service/loadqsb'] = array(
      'page callback' => 'get_qsb_data',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      'file' => 'service-include/' . $appName . '-service.inc',
    );
    
    $items['service/loadqsb/%'] = array(
      'page callback' => 'get_qsb_data',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'service-include/' . $appName . '-service.inc',
    );
    
    $items['service/loadqsb/%/%'] = array(
    'page callback' => 'get_qsb_data',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'service-include/' . $appName . '-service.inc',
  );
    
    //3 levels, and category is the first dropdown
    $items['service/loadqsb_c'] = array(
      'page callback' => 'get_qsb_data_3_c',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'service-include/' . $appName . '-service.inc',
    );
    
    $items['service/loadqsb_c/%'] = array(
      'page callback' => 'get_qsb_data_3_c',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'service-include/' . $appName . '-service.inc',
    );
    
    $items['service/loadqsb_c/%/%'] = array(
    'page callback' => 'get_qsb_data_3_c',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'service-include/' . $appName . '-service.inc',
  );
    
    //2 levels, and category is the first dropdown
    $items['service/loadqsb_2'] = array(
      'page callback' => 'get_qsb_data_2',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'service-include/' . $appName . '-service.inc',
    );
    $items['service/loadqsb_2/%'] = array(
      'page callback' => 'get_qsb_data_2',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'service-include/' . $appName . '-service.inc',
    ); 
    
    return $items;
}

/**
 * Implements hook_init().
 */
function eddy_qsb_init() {

	//Added so if eddy_listing is not enabled Javascript still can have trailing slash to the end of the URL when making AJAX calls.
    if(!module_exists('eddy_listing') && module_exists('trailing_slash'))
		drupal_add_js(array('trailing_slash' => true), 'setting');

}
/**
 * Implements hook_theme().
 */
function eddy_qsb_theme() {
    return array(
      'qsb_block_page' => array(
        'template' => 'eddy-qsb-block',
      ),
      'qsb_admin_overview' => array(
        'file' => 'eddy_qsb_qsb.inc',
        'variables' => array('title' => NULL, 'name' => NULL, 'description' => NULL),
      ),
      'qsb_style_preview' => array(	
          'variables' => array('qsb' => NULL, 'q_question' => NULL),
          'template' => 'eddy-qsb-preview',
      ),   
      'qsb_thumb_upload' => array(
          'render element' => 'element',
      ),
    );
}

/**
 * Implements hook_block_info().
 */
function eddy_qsb_block_info() {
    $qsbs = get_qsb_names();
    $blocks = array();
    foreach ($qsbs as $name => $title) {
        // only those QSB which has questions will be created to a block
        if(qsb_questions_load($name)){
            $blocks[$name]['info'] = 'EDDY: Quick Search - ' . check_plain($title);
            // Block caching options (per role, per user, etc.)
            //$blocks[$name]['cache'] = DRUPAL_CACHE_PER_ROLE;//DRUPAL_NO_CACHE;
        }
    }
    return $blocks;
}

function theme_qsb_thumb_upload($variables) {

    $element = $variables['element'];

    if (isset($element['#file']->uri)) {
        $output = '<div class="form-item form-type-managed-file form-item-logo"><span class="file">';
        $output .= '<img height="50px" src="' . file_create_url($element['#file']->uri) . '" />';
        $output .= '<img src="/modules/file/icons/image-x-generic.png" title="image/jpeg" alt="" class="file-icon" />';
        $output .= l($element['#file']->filename, file_create_url($element['#file']->uri), array('attributes'=>array('target' => 'blank')));        
        $output .= '</span><input type="submit" id="edit-' . $element['#name'] . '-remove-button" name="' . $element['#name'] . '_remove_button" value="Remove" class="form-submit ajax-processed">';
        $output .= '<input type="hidden" name="' . $element['#name'] . '[fid]" value="' . $element['#file']->fid . '"></div>';

        return $output;
    }
}

/**
 * Implements hook_block_view().
 */

function eddy_qsb_block_view($delta = '') {


    if(variable_get('eddy_core_application_name')!="elearners" && variable_get('eddy_core_application_name')!="earn_my_degree" && variable_get('eddy_core_application_name')!="gradschools"){
        $appName = "default";
    }else{
        $appName = variable_get('eddy_core_application_name');
    }

	$form_url = variable_get('eddy_core_form_url', 'http://forms.' . $appName . '.com');
    
    eddy_qsb_set_filter_options($delta);

	//require_once(dirname(__FILE__) . '/eddy_qsb_service.inc');
	drupal_add_js(
		array(
			'degree_text' => EDDY_QSB_TYPE_DEGREE,
			'level_text' => EDDY_QSB_DEGREE_QTYPE_LEVEL,
			'category_text' => EDDY_QSB_DEGREE_QTYPE_CAT,
			'subject_text' => EDDY_QSB_DEGREE_QTYPE_SUB,					
			'appName' => $appName,
			'form_url' => $form_url,						
		), 'setting');
	
    drupal_add_css(drupal_get_path('module', 'eddy_qsb') .'/style/eddy_qsb.css');
	drupal_add_js(drupal_get_path('module', 'eddy_qsb') .'/js/eddy_qsb_block_view.js');
	drupal_add_js(drupal_get_path('module', 'eddy_qsb') .'/js/eddy_qsb_block_view_' . $appName . '.js');

	//set block title: initailly leave blank
	$data['subject'] = '';//check_plain($qsbs[$delta]);
	variable_set('qsb_name', $delta);
	//set block content
	$data['content'] = array('#markup' => theme('qsb_block_page'));
    $data['content']['classes'] = "clearfix";
	// Add contextual links for this block.
	if (!empty($data['content'])) {
		$data['content']['#contextual_links']['eddy_qsb'] = array('admin/structure/qsb/manage', array($delta));
	}
    
    
	return $data;
}


function eddy_qsb_preprocess_qsb_block_page(&$vars) {
	//get QSB
	$qsb = qsb_load(variable_get('qsb_name'));
	$vars['qsb'] = $qsb;
	//get the QSB questions
	$vars['q_question'] = qsb_questions_load(variable_get('qsb_name'));
	//if this is a Drupal internal QSB

    $background = ''; 
    $background_color = '';
    //apply background image and background color to qsb block

    if(!empty($qsb['image_fid'])){
        $background_image = file_load($qsb['image_fid']);
        if(!empty($background_image) && strrpos($background_image->uri," ") <= 0){
            $background_image_src = file_stream_wrapper_get_instance_by_uri($background_image->uri)->getDirectoryPath() . substr($background_image->uri, strpos($background_image->uri, '://')+2);
            $background = (!empty($qsb['image_fid']))? 'background-image:url(/' .$background_image_src . '); background-repeat:no-repeat;' : '';
            
        }
    }

    if(!empty($qsb['style_color'])){
        $background_color = 'background-color:' . $qsb['style_color'] . ';';
    }
    drupal_add_css('@media (min-width:768px){ #block-eddy-qsb-' . $qsb['qsb_name'] . ' { ' .  $background . ' }} #block-eddy-qsb-' . $qsb['qsb_name'] . ' { ' . $background_color . ' }', array('type' => 'inline', 'group' => CSS_THEME, 'weight' => 999));
	
	
}

/**
 * Implements hook_flush_caches().
 */
function eddy_qsb_flush_caches() {
	cache_clear_all('*', 'cache_eddy_qsb_data', TRUE);
}

/* Database operation */
/******************************************************************************************/


//Save QSB
function qsb_save($qsb) {
    try{
	    $fields = array();
	    $fields['title'] = $qsb['title'];
	    $fields['qsb_type'] = $qsb['qsb_type'];
	    $fields['qq_total'] = $qsb['qq_total'];
	    $fields['submit_type'] = $qsb['submit_type'];
	    $fields['submit_url'] = $qsb['submit_url'];
	    $fields['description'] = $qsb['description'];
	
	    $status = db_merge('eddy_qsb')
		    ->key(array('qsb_name' => $qsb['qsb_name']))
		    ->fields($fields)
		    ->execute();
	    if($status){
		    drupal_set_message(t('Your configuration has been saved.'));
	    }else{
		    drupal_set_message(t('There was an issue with your configuration.'), 'error');
	    }
	    cache_clear_all();
    }
    catch (Exception $e) {
		dpm($e);
	}
}


//Save QSB questions and QSB's submit button text
function qsb_question_save($questions) {
    
    try{
	    $result = TRUE;
	    for($num = 0; $num < count($questions); $num++){
		    if(!empty($questions[$num])){				

			    $fields = array();			
			    $fields['qsb_name'] = $questions['qsb_name'];
			    $fields['qq_label'] = $questions[$num]['qq_label'];
			    $fields['qq_field_label'] = $questions[$num]['qq_field_label'];
			    $fields['qq_field_type'] = $questions[$num]['qq_field_type'];
			    $fields['qq_type'] = $questions[$num]['qq_type'];
			    $fields['sequence'] = $questions[$num]['sequence'];
			    $fields['o_status'] = $questions[$num]['o_status'];

			    $status = db_merge('eddy_qsb_questions')			
			    ->key(array('qqid' => $questions['qsb_name'] . '-' . $questions[$num]['sequence']))
			    ->fields($fields)
			    ->execute();	
			
			    if(!$status){
				    $result = FALSE;
			    }
		    }
	    }
	
	    //Save submit_text to eddy_qsb
	    $status = db_merge('eddy_qsb')
	    ->key(array('qsb_name' => $questions['qsb_name']))
	    ->fields(array(
	      'submit_text' => $questions['submit_text'],
          'prechk_filter' => $questions['prechk_filter'],      
	    ))
	    ->execute();
	    if(!$status){
		    $result = FALSE;
	    }


	    if($result){
		    drupal_set_message(t('Your configuration has been saved.'));
	    }else{
		    drupal_set_message(t('There was an issue with your configuration.'), 'error');
	    }
	    cache_clear_all();
    }catch (Exception $e) {
		dpm($e);
	}
}


//Save QSB's class name(style) into both {eddy_qsb} and {block_class}
function qsb_style_save($qsb) {
    
    try{
        $query = db_select('file_managed', 'f')
         -> fields('f', array('fid'))
         -> condition('fid', $qsb['image'], '=')
         -> execute();

        $fid = $query->fetchField();

        //Record that the module (in this example, user module) is using the file.
        if(!empty($fid)){
            // Load the file via file.fid.
            $file = file_load($qsb['image']);
            // Change status to permanent.
            $file->status = FILE_STATUS_PERMANENT;
            // Save.
            file_save($file);
        
            // Record that the module (in this example, user module) is using the file.
            $query = db_select('eddy_qsb', 'qsb')
             -> fields('qsb', array('qsb_id'))
             -> condition('qsb_name', $qsb['qsb_name'], '=')
             -> execute();
        
            $result = $query->fetchField();
        
            if(!empty($result)){
                file_usage_add($file, 'eddy_qsb', 'eddy_qsb', $result);   
            }
        }
    
	    $result = True;    
    
	    $status = db_merge('eddy_qsb')
	    ->key(array('qsb_name' => $qsb['qsb_name']))
	    ->fields(array(		
		    'style_color' => trim($qsb['color']),
		    'question_alignment' => $qsb['question_align'],
		    'title_alignment' => $qsb['title_align'],
		    'button_alignment' => $qsb['button_align'],
            //'image_filename' => $qsb['image_uri'],
            'image_fid' => $qsb['image'],
            'image_alignment' => $qsb['image_position'],
            'form_alignment' => $qsb['form_position'],
            'form_padding' => $qsb['form_padding'],
            'form_width' => $qsb['form_width'],
            'form_height' => $qsb['form_height'],
            'button_skin' => $qsb['button_skin'],
	    ));
    
        if(!empty($qsb['image'])){
            $status->fields(array('image_alignment' => $qsb['image_position']));
        }
    
	    $status->execute();
    
	    if(!$status){
		    $result = FALSE;
	    }

        $background_position = '';
        if(!empty($qsb['image']) && !empty($qsb['image_position'])){
            $background_position = $qsb['image_position'];
        }
        $style = $qsb['question_align'] . ' ' . $qsb['title_align'] . ' ' . $qsb['button_align'] . ' ' . $background_position;
        $new_style = explode(" ", $style);
        $query = db_select('block','c')
                ->fields('c', array('css_class'))
                //->expression('css_class', 'css_class + :style', array(':style' => $style))
                ->condition('module', 'eddy_qsb', '=')
                ->condition('delta', $qsb['qsb_name'], '=')
                ->execute();
    
        $old_style = $query->fetchAssoc();

        if(!empty($old_style)){
            $old_style = explode(" ", $old_style['css_class']);
            foreach($old_style as $key=>$value){
                if(strpos($value, "col-") === false){
                    unset($old_style[$key]);
                }
            }
        
            $merged_style = implode(" ", array_merge($old_style, $new_style));
        
        }else{

            $merged_style = implode(" ", $new_style);
        }

        $status = db_update('block')
        ->fields(array(
            'css_class' =>  $merged_style,
        ))
        //->expression('css_class', 'css_class + :style', array(':style' => $style))
        ->condition('module', 'eddy_qsb', '=')
        ->condition('delta', $qsb['qsb_name'], '=')
        ->execute();
        //if(!$status){
        //    $result = FALSE;
        //}

        //if($result){
        drupal_set_message(t('Your configuration has been saved.'));
        //}else{
        //    drupal_set_message(t('There was an issue with your configuration.'), 'error');
        //}
	    cache_clear_all();
    }
    catch (Exception $e) {
		dpm($e);
	}
}
/**
 * Delete a QSB and its all questions, block, and block class related.
 *
 * Note that this function deletes all questions in a QSB. While questions
 * derived from router paths may be restored by rebuilding the QSB, all
 * questions will be irreversibly gone. Therefore, this
 * function should usually be called from a user interface (form submit) handler
 * only, which allows the user to confirm the action.
 *
 * @param $qsb
 *   An array representing a QSB:
 *   - qsb_name: The unique name of the QSB.
 *   - title: The human readable QSB title.
 *   - description: The QSB description.
 *
 * Modules should always pass a fully populated $qsb when deleting a
 * QSB, so other modules are able to output proper status or watchdog messages.
 *
 * @see qsb_load()
 *
 * hook_delete().
 */

function qsb_delete($qsb) {

	qsb_questions_remove($qsb['qsb_name']);
	//qsb_block_class_remove($qsb['qsb_name']);  
	qsb_block_remove($qsb['qsb_name']);
	qsb_remove($qsb['qsb_name']);
    
	cache_clear_all();

}


function qsb_questions_delete($qsb) {
    
    qsb_questions_remove($qsb['qsb_name']);
    //qsb_block_class_remove($qsb['qsb_name']); 

    cache_clear_all();

}

function qsb_remove($qsb_name){
    try{    
      db_delete('eddy_qsb')
      ->condition('qsb_name', $qsb_name)
      ->execute();
    }
    catch (Exception $e) {
		dpm($e);
	}
}

function qsb_questions_remove($qsb_name){
    try{
      db_delete('eddy_qsb_questions')
      ->condition('qsb_name', $qsb_name)
      ->execute();
      }
    catch (Exception $e) {
		dpm($e);
	}
}

function qsb_block_remove($qsb_name){
    try{
      db_delete('block')
      ->condition('delta', $qsb_name)
      ->execute();
      }
    catch (Exception $e) {
		dpm($e);
	}
}

//function qsb_block_class_remove($qsb_name){
//    db_delete('block_class')
//        ->condition('module', 'eddy_qsb')
//        ->condition('delta', $qsb_name)
//        ->execute();
//}



/**
 * Load the data for a single QSB.
 *
 * @param $qsb_name
 *   The unique name of a QSB to load.
 * @return
 *   Array defining the QSB, or FALSE if the QSB doesn't exist.
 */

function qsb_load($qsb_name) {
    $all_qsbs = qsb_load_all();
    return isset($all_qsbs[$qsb_name]) ? $all_qsbs[$qsb_name] : FALSE;
}

/**
 * Load all QSB data.
 *
 * @return
 *   Array of QSB data.
 */

function qsb_load_all() {

    try{
        $ask_qsbs = db_query('SELECT * FROM {eddy_qsb}')->fetchAllAssoc('qsb_name', PDO::FETCH_ASSOC);
        return $ask_qsbs;
    }
    catch (Exception $e) {
		dpm($e);
	}
}


/**
 * Return an associative array of the QSB names.
 *
 * @return
 *   An array with the machine-readable names as the keys, and human-readable
 *   titles as the values.
 */

function get_qsb_names() {

    if ($ask_qsbs = qsb_load_all()) {
        foreach ($ask_qsbs as $qsb_name => $qsb) {
            $ask_qsbs[$qsb_name] = t($qsb['title']);
        }
        asort($ask_qsbs);
    }
    return $ask_qsbs;
}



/**
 * Load the QSB questions data.
 *
 * @return
 *   Array of a QSB questions data.
 */

function qsb_questions_load($qsb_name) {

    try{
        $ask_qqs = db_query('SELECT * FROM {eddy_qsb_questions} qq where qq.qsb_name = :qsb_name', array(':qsb_name' => $qsb_name))->fetchAllAssoc('qqid', PDO::FETCH_ASSOC);
        return (!empty($ask_qqs) ? $ask_qqs : FALSE);
    }
    catch (Exception $e) {
		dpm($e);
	}
}

//Degree's questions add goback callback
function eddy_questions_add_goback($form, &$form_state){	
	$form_state['redirect'] = 'admin/structure/qsb/manage/' . $form_state['values']['qsb_name'] . '/questions/add';
}

function eddy_qsb_set_filter_options($delta){
    
    $options = array();

    $qsb = qsb_load($delta);

    if(array_key_exists('prechk_filter', $qsb) && $qsb['prechk_filter']){
    
        drupal_add_js(array('prechk_filter' => true), 'setting');
    }
    
    if((arg(0) == 'node') && is_numeric(arg(1))) {
        $node = node_load(arg(1));
    
        if(function_exists('eddy_listings_get_external_ids_from_term_field')){
		    if(isset($node->field_level_tr))
			    $options['level'] = eddy_listings_get_external_ids_from_term_field($node->field_level_tr);
		    if(isset($node->field_category_tr))
			    $options['category'] = eddy_listings_get_external_ids_from_term_field($node->field_category_tr);
		    if(isset($node->field_subject_tr))
			    $options['subject'] = eddy_listings_get_external_ids_from_term_field($node->field_subject_tr);
        }

        //get options by checking listing get filter settings
        if(empty($options) && function_exists('multisite_listing_get_filter_settings_by_id')){
            $filter_settings = multisite_listing_get_filter_settings_by_id(arg(1),'node');        
            if(isset($filter_settings->field_categories_values) && !empty($filter_settings->field_categories_values[0])){
                $filter_category = new stdClass();
                $filter_category = $filter_settings->field_categories_values[0];
                if(isset($filter_category->setting_value))
                    $options['category'][] = $filter_category->setting_value;            
            }
            if(isset($filter_settings->field_subjects_values) && !empty($filter_settings->field_subjects_values[0])){
                $filter_subject = new stdClass();
                $filter_subject = $filter_settings->field_subjects_values[0];
                if(isset($filter_subject->setting_value))
                    $options['subject'][] = $filter_subject->setting_value;            
            }
            if(isset($filter_settings->field_program_levels_values) && !empty($filter_settings->field_program_levels_values[0])){
                $filter_level = new stdClass();
                $filter_level = $filter_settings->field_program_levels_values[0];
                if(isset($filter_level->setting_value))
                    $options['level'][] = $filter_level->setting_value;            
            }

        }
    }

    if(!empty($options)){

        drupal_add_js(array("prechk_filter_options" => $options), 'setting');

    }
}
