<?php

/**
 * @file
 * Allows administrators to customize the site's navigation menus.
 *
 * A menu (in this context) is a hierarchical collection of links, generally
 * used for navigation. This is not to be confused with the
 * @link menu Menu system @endlink of menu.inc and hook_menu(), which defines
 * page routing requests for Drupal, and also allows the defined page routing
 * URLs to be added to the main site navigation menu.
 */

/**
 * Implements hook_menu().
 */
function eddy_listing_menu() {
    $items['admin/structure/eddy_listing'] = array(
      'title' => 'Listings',
      'description' => 'Add new Listing block to your site, edit existing Listings, and rename and reorganize Listings.',
      'page callback' => 'eddy_listing_overview_page',
      'access callback' => 'user_access',
      'access arguments' => array('administer eddy listing'),
      'file' => 'eddy_listing.admin.inc',
    );

    $items['admin/structure/eddy_listing/add'] = array(
      'title' => 'Add List',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_listing_add_list', 'add'),
      'access arguments' => array('administer eddy listing'),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'eddy_listing.admin.inc',
    );

    $items['admin/structure/eddy_listing/manage/%eddy_listing/edit'] = array(
      'title' => 'Edit List',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_listing_edit_list', 'edit', 4),
      'access arguments' => array('administer eddy listing'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'eddy_listing.admin.inc',
    );

    $items['admin/structure/eddy_listing/manage/%eddy_listing/delete'] = array(
      'title' => 'Delete Listing',
      'page callback' => 'eddy_listing_delete_list_page',
      'page arguments' => array(4),
      'access arguments' => array('administer eddy listing'),
      'file' => 'eddy_listing.admin.inc',
    );

    //GET Listings VIA AJAX
    $items['eddy-listing-ajax/%/%/%'] = array(
      'title' => 'Listings Ajax',
      'page callback' => 'eddy_listing_contents_ajax',
      'page arguments' => array(1,2,3),
      'access callback' => TRUE,
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function eddy_listing_permission() {
    return array(
      'administer eddy listing' => array(
        'title' => t('Administer Listings'),
      ),
    );
}

/**
 * Implements hook_theme().
 */
function eddy_listing_theme() {
    return array(
      'eddy_listing_schools' => array(
        'variables' => array('matching_list' => NULL, 'list_fields' => NULL, 'pager'=>''),
        'template' => 'eddy-listing-schools',
      ),
      'eddy_listing_programs' => array(
        'variables' => array('matching_list' => NULL, 'list_fields' => NULL, 'pager' => ''),
        'template' => 'eddy-listing-programs',
      ),
      'eddy_listing_campuses' => array(
        'variables' => array('matching_list' => NULL, 'list_fields' => NULL, 'pager'=>''),
        'template' => 'eddy-listing-campuses',
      ),
      'eddy_listing_admin_overview' => array(
        'file' => 'eddy_listing.admin.inc',
        'variables' => array('title' => NULL, 'name' => NULL, 'description' => NULL),
      ),
    );
}

/**
 * Implements hook_init().
 */
function eddy_listing_init() {

	//Added so Javascript can add trailing slash to the end of the URL when making AJAX calls.
	if(module_exists('trailing_slash'))
		drupal_add_js(array('trailing_slash' => true), 'setting');

}

/*******************************
REGION: STRUCTURING OF THE BLOCK
 ********************************/

/**
 * Load the data for a single custom list.
 *
 * @param $list_name
 *   The unique name of a custom list to load.
 * @return
 *   Array defining the custom list, or FALSE if the list doesn't exist.
 */
function eddy_listing_load($list_name) {
    $all_lists = eddy_listing_load_all();
    return isset($all_lists[$list_name]) ? $all_lists[$list_name] : FALSE;
}

/**
 * Load all custom list data.
 *
 * @return
 *   Array of custom list data.
 */
function eddy_listing_load_all() {

    $output = array();

    try{
        $output = db_query('SELECT * FROM {eddy_listing}')->fetchAllAssoc('id', PDO::FETCH_ASSOC);
    }
    catch(Exception $e){
        if(module_exists('devel')){
            dpm($e);
        }
    }
    return $output;

}

/**
 * Return an associative array of the custom List names.
 *
 * @return
 *   An array with the machine-readable names as the keys, and human-readable
 *   titles as the values.
 */
function eddy_listing_get_list_by_delta($delta) {

    $output = array();

    try{

        $output = db_select('eddy_listing', 'l')
            ->fields('l')
            ->condition('id', $delta)
            ->execute()
            ->fetchAssoc();

    }
    catch(Exception $e){

        if(module_exists('devel')){
            dpm($e);
        }

    }

    return $output;

}

/**
 * Implements hook_block_info().
 */
function eddy_listing_block_info() {

    $lists = eddy_listing_load_all();

    $blocks = array();
    foreach ($lists as $index => $data) {

        $blocks[$index] = array(
            'info' => 'EDDY: ' . $data['name'],
        );

        if ($data['show_pager'] == 1) {
            $blocks[$index]['status'] = FALSE;
            $blocks[$index]['region'] = 'content';
        }
        else
            $blocks[$index]['status'] = FALSE;
    }

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function eddy_listing_block_view($delta = '') {

    $list = eddy_listing_get_list_by_delta($delta);

    $data['subject'] = t($list['name']);
    $data['content'] = get_eddy_listing_contents($delta);

    // Add contextual links for this block.
    if (!empty($data['content'])) {
        $data['content']['#contextual_links']['eddy_listing'] = array('admin/structure/eddy_listing/manage', array($delta));
    }

    if(empty($data['content'])){
        $data = null;
    }

    return $data;

}


/**
 * Implements hook_flush_caches().
 */
function eddy_listing_flush_caches() {
	cache_clear_all('eddy_listing_', 'cache_eddy_listing_data', TRUE);
}

/**
 * Sets List Attributes for other functions to use.
 */
function set_eddy_listing_attributes($data = NULL) {

    $output = &drupal_static(__FUNCTION__);
    if (isset($data)) {
        $output = $data;
    }
    return $output;

}

/**
 * Gets List Attributes for other functions to use.
 */
function get_eddy_listing_attributes() {

    return set_eddy_listing_attributes();

}

/**
 * Sets total results count for theme and modules to use.
 */
function set_eddy_listing_total_results_count($data = NULL) {

    $output = &drupal_static(__FUNCTION__);
    if (isset($data)) {
        $output = $data;
    }
    return $output;

}

/**
 * Gets total results count.
 */
function get_eddy_listing_total_results_count() {

    return set_eddy_listing_total_results_count();

}

/**
 * Sets the program results count for theme and modules to use.
 */
function set_eddy_listing_program_results_count($data = NULL) {

    $output = &drupal_static(__FUNCTION__);
    if (isset($data)) {
        $output = $data;
    }
    return $output;

}

/**
 * Gets the program results count.
 */
function get_eddy_listing_program_results_count() {

    return set_eddy_listing_program_results_count();

}


/**
 * Implements hook_url_outbound_alte().
 */
function eddy_listing_url_outbound_alter(&$path, &$options, $original_path) {

    //Removes the Radius and Postal Code Query Strings from the pager.
    if(preg_match('/^eddy-listing-ajax/', $path)){

        if(isset($options['query']['radius'])){
            unset($options['query']['radius']);
        }

        if(isset($options['query']['postal_code'])){
            unset($options['query']['postal_code']);
        }

        if(isset($options['query']['cache_buster'])){
            unset($options['query']['cache_buster']);
        }

    }

}

/**
 * Menu callback for when the list is being called via AJAX.
 */
function eddy_listing_contents_ajax($nodeId, $listId, $pageSize) {

    $base_content_url = get_base_content_url();

	$data = get_eddy_listing_contents($listId, $pageSize);

	$url = url('eddy-listing-ajax/' . $nodeId . '/' . $listId . '/' . $pageSize);

	$output = render($data);
	$output = str_replace('src="/logo', 'src="'.$base_content_url.'logo', $output);
	$output = str_replace($url, '', $output);

	print $output;
	drupal_exit();

}

/**
 * Get Listings Content
 */
function get_eddy_listing_contents($list_id, $pageSize = 0) {

	$list_fields = eddy_listing_get_list_fields($list_id);

    if(empty($list_fields)){
	    return "This listing which you are requesting does not appear to be in the System.";
    }

	if($pageSize == 0 || !$list_fields->user_change_records){
		$pageSize = $list_fields->total_records_to_display;
	}

    if($pageSize == 'ALL'){
        $pageSize = 9999;
    }

	$merged_list = array();

	$listResults = eddy_listing_get_listings($list_fields, $pageSize);

	$online_only = false;

	if(in_array(2, $listResults['request']['campus_type']) && $listResults['resultsCount'] == 0 && $list_fields->online_when_empty){

		$online_only = true;
		$listResults = eddy_listing_get_listings($list_fields, $pageSize, $online_only);

	}

	$list_fields->node = $listResults["node"];

	if(!empty($listResults['results'])){

		$merged_list = merge_list_with_drupal_nodes($listResults['results'], $list_fields);

	}

	//This is only available for Program at this time.
	if ($list_fields->sort && $list_fields->sort_by != 'alphabetical') {

        $merged_list = sort_by_key($merged_list, $list_fields->sort_by);

	}

    //module_invoke_all('eddy_listing_list_result_alter', $list, $list_fields);
    //Allows other modules to alter the results by using "hook_eddy_listing_list_result_alter"
    drupal_alter('eddy_listing_list_result', $merged_list, $list_fields);

	if (!empty($merged_list)) {

		eddy_listings_set_tracking_data($merged_list);

        $machineName = str_replace("-", "_", $list_fields->machine_name);

		switch ($list_fields->type){
			case 'school':
				$theme_page = 'eddy_listing_schools__' . $machineName;
				break;
			case 'program':
				$theme_page = 'eddy_listing_programs__' . $machineName;
				break;
			case 'campus':
				$theme_page = 'eddy_listing_campuses__' . $machineName;
				break;

		}

		$totalResultsCount = 0;
		$totalProgramResultsCount = 0;

		if ($list_fields->show_pager){

			$totalResultsCount = get_eddy_listing_total_results_count();
			$totalProgramResultsCount = get_eddy_listing_program_results_count();

            //Initializes pager to be used in the theme.
			pager_default_initialize($totalResultsCount, $pageSize);

		}

		$markup_template = "";

		if($online_only)
			$markup_template .= "<div class=\"messages status message-online-only\">Sorry, there are currently no related <strong>Campus Programs</strong> available in your area, however, we do have <strong>Online Programs</strong> as shown below.</div>";

        $markup_template .= theme($theme_page, array('matching_list' =>  $merged_list,'list_fields' => $list_fields, 'pager'=>theme('pager')));

		//Removes H2 tag on pager
		$markup_template = str_replace('<h2 class="element-invisible">Pages</h2>', '', $markup_template);

		$markup_template .= '<input type="hidden" class="matchResponseGuid" value="' . $listResults['matchResponseGuid'] . '"/>';
		$markup_template .= '<input type="hidden" class="localResultsCount" value="' . $listResults['resultsCount'] . '"/>';

		if($totalResultsCount > 0)
			$markup_template .= '<input type="hidden" class="globalResultsCount" value="' . $totalResultsCount . '"/>';

		if($totalProgramResultsCount > 0)
			$markup_template .= '<input type="hidden" class="globalProgramResultsCount" value="' . $totalProgramResultsCount . '"/>';

        #region Adds Impression Logging
        if(arg(0) == 'eddy-listing-ajax'){

            $tracking_items = array();
            foreach($merged_list as $item){

                if(isset($item->TrackingLog)){

                    foreach($item->TrackingLog as $tl){

                        $tracking_items[] = $tl;

                    }

                }

            }

            $chunked = array_chunk($tracking_items, 200);

            $markup_template .= '<script type="text/javascript">try{';

            foreach($chunked as $chunk){

                $push_items = '';
                foreach($chunk as $c){

                    $push_items .= $c;

                }

                $markup_template .= 'var pl = new Array();' . $push_items . '_etq.push(["_etImpression", 1, pl]);';

            }

            $markup_template .= '}catch(e){}</script>';

        }
        #endregion

        return array('#markup' => $markup_template);

	}
    else if(empty($merged_list) && !$listResults['hide_block']){

        return array('#markup' => "Loading..."); //Will output empty block which will be replaced when AJAX response comes back.

    }
    else{

        return array();

    }

}

function eddy_listings_set_tracking_data(&$list){

    $page = 1;
    if(!empty($_GET['page'])){

        $page = $_GET['page'] + 1;

    }

    $i = 0;
    foreach($list as $k => $v){

        if(isset($v->CampusList)){

            if(isset($v->InstitutionId)){

                foreach($v->CampusList as $ck => $cv){

                    $v->CampusList[$ck]->InstitutionId = $v->InstitutionId;
                    $v->CampusList[$ck]->InstitutionName = $v->InstitutionName;

                }

            }

            eddy_listings_set_tracking_data($v->CampusList);

        }else{

            if(isset($v->ProgramList)){

                $list[$k]->TrackingLog = array();

                foreach($v->ProgramList as $pk => $pv){

                    $list[$k]->ProgramList[$pk]->ClickTrackingAttributes = array();

                    //Adds Institution Id to the Program Details.
                    $list[$k]->ProgramList[$pk]->InstitutionId = $v->InstitutionId;
                    $list[$k]->ProgramList[$pk]->InstitutionName = $v->InstitutionName;
                    $list[$k]->ProgramList[$pk]->ShowClickThroughLink = FALSE;
                    $list[$k]->ProgramList[$pk]->TrackingParams = new stdclass;

                    if(isset($pv->ProgramProductIdClick) && !empty($pv->ProgramProductIdClick)){

                        $params = new stdclass;
                        $params->ProgramProductIdClick = $pv->ProgramProductIdClick;
                        $params->Position = $i + $pk + 1;
                        $params->Page = $page;
                        $params->ProgramName = $pv->ProgramName;
                        $params->ProgramId = $pv->ProgramId;

                        $list[$k]->ProgramList[$pk]->ClickTrackingAttributes = array(
                            'data-program-product-id' => $params->ProgramProductIdClick,
                            'data-program-id' => $params->ProgramId,
                            'data-position' => $params->Position,
                            'data-page' => $params->Page,
                            'data-listing-type-id' => 1,
                            'data-track-clicks' => true,
                            'data-program-name' => $params->ProgramName,
                        );

                        $list[$k]->ProgramList[$pk]->ShowClickThroughLink = TRUE;
                        $list[$k]->ProgramList[$pk]->TrackingParams = $params;

                        $list[$k]->TrackingLog[$pk] = "pl.push({ 'pp': $params->ProgramProductIdClick, 'pos': $params->Position, 'pg': $page });";

                    }

                }

                $i = $i + count($v->ProgramList);

            }else if(isset($v->ProgramId)){ //If the list is a Program List.

                $params = new stdclass;
                $params->ProgramProductId = $v->ProgramProductId;
                $params->ProgramId = $v->ProgramId;
                $params->Position = $k + 1;
                $params->Page = $page;
                $params->ProgramName = $v->ProgramName;

                $list[$k]->ShowClickThroughLink = FALSE;
                $list[$k]->TrackingLog = array();
                $list[$k]->TrackingParams = new stdclass;
                $list[$k]->ClickTrackingAttributes = array();

                if(isset($list[$k]->ProgramProductIdClick) && !empty($list[$k]->ProgramProductIdClick)){

                    $list[$k]->ClickTrackingAttributes = array(
                        'data-program-product-id' => $params->ProgramProductId,
                        'data-program-id' => $params->ProgramId,
                        'data-position' => $params->Position,
                        'data-page' => $params->Page,
                        'data-listing-type-id' => 1,
                        'data-track-clicks' => true,
                        'data-program-name' => $params->ProgramName,
                    );

                    $list[$k]->TrackingParams = $params;
                    $list[$k]->ShowClickThroughLink = TRUE;

                    $list[$k]->TrackingLog[] = "pl.push({ 'pp': $params->ProgramProductId, 'pos': $params->Position, 'pg': $page });";

                }

            }

        }

    }

}


/**
 * Merge Listing with content that lives in Drupal.
 */
function merge_list_with_drupal_nodes($list, $list_fields){
    $application_id = variable_get('eddy_core_application_id');
	if($list_fields->random_item_from_list && count($list) > 1){

        $ranNum = rand(0, count($list) -1);
        $list = $list[$ranNum];

    }

    //Adds the Correct Description to the List.
    foreach($list as $k => $v) {

        switch($application_id){
            case 1 :
            case 20:
                $list[$k]->description = (!empty($v->InstitutionDescriptionInternational)) ? $v->InstitutionDescriptionInternational : $v->InstitutionDescription;
                break;
            default:
                $list[$k]->description = $v->InstitutionDescription;
                break;

        }

        $list[$k]->url_alias = '';

    }

    $totalCount = count($list);
    foreach($list as $index => $data) {

        //retrieves the readable name of the value they would like to sort by and adds it
		//to the programs listing array
		if ($list_fields->sort && $list_fields->sort_by != 'alphabetical') {

			$sortItemInfo = (array)get_drupal_sort_name_text($list_fields->sort_by, $data);

			if(isset($list[$index]))
				$list[$index]->sort_text = $sortItemInfo['name'];

		}

        setClasses($list, $index, $totalCount);

    }

	return $list;

}

/**
 * Gets Listings Results
 */
function eddy_listing_get_listings($list_fields, $resultsCount = 0, $online_only = false) {

	$options = array(
		'campus_type' => array(),
		'type' => array(),
		'level' => array(),
		'category' => array(),
		'subject' => array(),
		'institution' => array(),
	);

	$node = new stdclass;

    $nid = 0;
    $current_menu = menu_get_item();
    if((arg(0) == 'node' || arg(0) == 'eddy-listing-ajax') && is_numeric(arg(1))) {
        $nid = arg(1);
    }
    //For Program Pages
    else if(!empty($current_menu['description']) && $current_menu['description'] == 'program_details'){
        //Get Node ID by looking up the full alais of a school page.
        $nid = str_replace('node/', '', drupal_lookup_path('source', arg(0) . '/' . arg(1)));
    }

    if($nid > 0){
        $node = node_load($nid);
        drupal_add_js(array('nid' => $nid), 'setting');
    }

	if($list_fields->filter_source == 'node'){

		if(isset($node->nid)){

			//Load the node from the Node id
			if(!empty($node->field_external_id['und'][0]['value'])){

                if ($node->type == 'school' || $node->type == 'institution'){
				    $options['institution'] = array($node->field_external_id['und'][0]['value']);
                }
                else if ($node->type == 'campus'){
				    $options['campus'] = array($node->field_external_id['und'][0]['value']);
                }

            }
			//68384 - certificate and course removed from program type
            //if (isset($node->field_type_tr))
            //    $options['type'] = eddy_listings_get_external_ids_from_term_field($node->field_type_tr);

			if(isset($node->field_campus_type_tr))
				$options['campus_type'] = eddy_listings_get_external_ids_from_term_field($node->field_campus_type_tr);

			if(isset($node->field_level_tr))
				$options['level'] = eddy_listings_get_external_ids_from_term_field($node->field_level_tr);

			if(isset($node->field_category_tr))
				$options['category'] = eddy_listings_get_external_ids_from_term_field($node->field_category_tr);

			if(isset($node->field_subject_tr))
				$options['subject'] = eddy_listings_get_external_ids_from_term_field($node->field_subject_tr);

            if(isset($node->field_specialty_tr))
				$options['specialty'] = eddy_listings_get_external_ids_from_term_field($node->field_specialty_tr);

            if(isset($node->field_country_tr))
				$options['country'] = eddy_listings_get_external_ids_from_term_field($node->field_country_tr);

            if(isset($node->field_state_tr))
				$options['state'] = eddy_listings_get_external_ids_from_term_field($node->field_state_tr);

            //GEO Filters for Regional Product List Pages
            if(!empty($node->field_postal_code[LANGUAGE_NONE][0]['value'])){

                $options['geo_target']['postal_code'] = $node->field_postal_code[LANGUAGE_NONE][0]['value'];

                if(!empty($node->field_range[LANGUAGE_NONE][0]['value']))
                    $options['geo_target']['radius'] = $node->field_range[LANGUAGE_NONE][0]['value'];

            }

			$output['node'] = $node;

		}
	}
	//Get Query String Paramaters if this type of filter is set.
	else if($list_fields->filter_source == 'qs'){

		eddy_listing_set_options_from_query_string($options);

	}

	//Keeps List from showing up if there is no paging.
    //if (isset($_GET['page']) && !$list_fields->show_pager)
    //    return array();

	//QS params that are used by all filter types.
	if(!empty($_GET['institution']))
		$options['institution'] = explode(",", $_GET['institution']);

	//Convert 'All' value to integer
	if($resultsCount == 'ALL')
		$resultsCount = 0;

	if($resultsCount > 0)
		$options['results_count'] = $resultsCount;
	else
		$options['results_count'] = 0;


	if (!empty($_GET['page']) && $list_fields->show_pager)
		$options['page'] = $_GET['page'];

	if($list_fields->featured && $list_fields->featured_list > 0){
		$options['featured_id'] = $list_fields->featured_list;
		$options['remove_capped'] = true;
	}

	//Include items to override which will override any page filters.
	$include_types = unserialize($list_fields->include_types);

	if(is_array($include_types) && array_sum($include_types) > 0){

		$types = array();

		foreach($include_types as $typeValue){
			if($typeValue > 0)
				$types[] = $typeValue;
		}
		$options['type'] = $types;

	}

	//Used for Campus Related Filters
	$campus_include_type = unserialize($list_fields->include_campus_types);

	if(!empty($campus_include_type) && array_sum($campus_include_type) > 0){

		$campus_types = array();

		foreach($campus_include_type as $campusTypeValue){
			if($campusTypeValue > 0)
				$campus_types[] = $campusTypeValue;
		}

		if(count($campus_types) == 1)
			$options['campus_type'] = $campus_types;

	}

	//Pass GEO Filters
	if(arg(0) == 'eddy-listing-ajax' && (empty($options['campus_type']) || (!empty($options['campus_type']) && in_array(2, $options['campus_type'])))){

		if(!empty($_GET['postal_code'])){

			$options['geo_target']['postal_code'] = $_GET['postal_code'];

			if(!empty($_GET['radius']))
				$options['geo_target']['radius'] = $_GET['radius'];

		}

	}

    //One more chance to Overwrite the parameters being passed by using Query string Variables.
    eddy_listing_set_options_from_query_string($options);


    //Sets the List to be online only.
	if($online_only) $options['campus_type'] = array(1);

	//Determine Sort method
	if($list_fields->sort)
		$options['sort_method'] = 2;

	if($list_fields->type == 'school'){

		$options['show_nested_campuses'] = false;

		if($list_fields->show_nested_campuses)
			$options['show_nested_campuses'] = true;

	}

	if($list_fields->show_nested_programs){
		$options['nested_results_count'] = $list_fields->nested_record_count;
	}

    if(isset($list_fields->remove_capped) && $list_fields->remove_capped){
		$options['remove_capped'] = True;
	}

    if(isset($list_fields->show_non_for_profit_list) && $list_fields->show_non_for_profit_list){
		$options['show_non_for_profit_list'] = True;
	}

	$cid = '';
	if(module_exists('eddy_core') && !eddy_core_is_beta()){

		foreach ($options as $key => $value){
			if(!empty($value)){
				if(is_array($value))
					$value = implode($value);

				$cid .= $key . '_' . $value . '_';
			}
		}

		$cid = 'eddy_listing_' . $list_fields->type . '_' . $list_fields->id . '_' . rtrim($cid, '_');

	}

	$cacheOptions = array(
		'cid' => $cid,
		'table' => 'cache_eddy_listing_data',
		'duration' => time() + 300,
		'enabled' => TRUE,
	);

	$method = "";

	switch($list_fields->type){
		case "program":
			if($list_fields->featured){
				$method = "GetPrograms";
			}
			else{
				$method = "GetPrograms";
			}
            break;
		case "school":
			if($list_fields->featured){
				$method = "GetInstitutions";
			}
			else{
				$method = "GetInstitutions";
			}
            break;
		case "campus":
			if($list_fields->featured){
				$method = "GetCampuses";
			}
			else{
				$method = "GetCampuses";
			}
            break;
	}

	if(arg(0) == 'eddy-listing-ajax' && !empty($_COOKIE['_CampaignTrackID']) && $_COOKIE['_CampaignTrackID'] != variable_get('eddy_core_track_id')){

		$options['track_id'] = $_COOKIE['_CampaignTrackID'];
		$cacheOptions['enabled'] = FALSE;

	}

	if(arg(0) == 'eddy-listing-ajax' && !empty($_COOKIE['_Device'])){

		$options['device'] = $_COOKIE['_Device'];

	}

    //Allows other modules to alter the Listing Request by using "hook_eddy_listing_list_request_alter"
    drupal_alter('eddy_listing_list_request', $options, $list_fields, $node);

    //Added so other modules can get information when using JavaScript
	if(arg(0) != 'eddy-listing-ajax' && !$list_fields->featured){

		drupal_add_js(array("eddy_listing_requests" => $options), 'setting');

	}

    $output = array(
		    'results' => array(),
		    'matchResponseGuid' => 0,
		    'resultsCount' => 0,
		    'ProgramResultCount' => 0,
		    'node' => $node,
		    'request' => $options,
            'hide_block' => TRUE,
	    );

    if(_eddy_listing_call_service($list_fields)){

        if ($cacheOptions['cid'] != '' && variable_get('eddy_services_cache_is_enabled') && $cache = cache_get($cid, $cacheOptions['table'])){

		    if ($cache->expire > REQUEST_TIME)
			    $results = $cache->data;
		    else
			    $results = eddy_services_get_listings($options, $method, $cacheOptions);

	    }else{
		    $results = eddy_services_get_listings($options, $method, $cacheOptions);
	    }

	    if(!empty($results->GetProgramsResult->ProgramList)){
		    $programResults = $results->GetProgramsResult;
		    $output['results'] = $programResults->ProgramList;
		    $output['matchResponseGuid'] = $programResults->MatchResponseGuid;
		    $output['resultsCount'] = $programResults->ResultCount;
		    $output['ProgramResultCount'] = $programResults->ResultCount;
	    }

	    else if(!empty($results->GetInstitutionsResult->InstitutionList)){
		    $institutionResults = $results->GetInstitutionsResult;
		    $output['results'] = $institutionResults->InstitutionList;
		    $output['matchResponseGuid'] = $institutionResults->MatchResponseGuid;
		    $output['resultsCount'] = $institutionResults->ResultCount;
		    $output['ProgramResultCount'] = $institutionResults->ProgramResultCount;
	    }

	    else if(!empty($results->GetCampusesResult->CampusList)){
		    $campusResults = $results->GetCampusesResult;
		    $output['results'] = $campusResults->CampusList;
		    $output['matchResponseGuid'] = $campusResults->MatchResponseGuid;
		    $output['resultsCount'] = $campusResults->ResultCount;
		    $output['ProgramResultCount'] = $campusResults->ProgramResultCount;
	    }

	    if($list_fields->show_pager){

		    //Sets Results Counts be used later
		    set_eddy_listing_total_results_count($output['resultsCount']);
		    set_eddy_listing_program_results_count($output['ProgramResultCount']);

	    }

    }else{

        $output['hide_block'] = FALSE;
        $output['results'] = array();

    }

    ////Prevents listings from printing out if a service call is made.
    //if(arg(0) != 'eddy-listing-ajax' && isset($list_fields->listing_in_html) && !$list_fields->listing_in_html){

    //    $output['hide_block'] = FALSE;
    //    $output['results'] = array();

    //}

	return $output;

}

/**
 * Check if Service should be called.
 */
function _eddy_listing_call_service($list_fields){

    if(arg(0) == 'eddy-listing-ajax'){

        return TRUE;

    }

    if(!isset($list_fields->listing_in_html) || (isset($list_fields->listing_in_html) && $list_fields->listing_in_html)){

        return TRUE;

    }

    //if(isset($list_fields->prevent_empty_blocks) && $list_fields->prevent_empty_blocks){

    //    return TRUE;

    //}

    return FALSE;

}


/**
 * Adds Query String Paramaters to the options array.
 */
function eddy_listing_set_options_from_query_string(&$options){

    $queryStrings = array(
        array(
            'option_name' => 'type',
            'vocab_name' => 'types',
            'query_strings' => array('type', 'types'),
        ),
        array(
            'option_name' => 'campus_type',
            'vocab_name' => 'campus_types',
            'query_strings' => array('campus_type', 'campus_types'),
        ),
        array(
            'option_name' => 'level',
            'vocab_name' => 'levels',
            'query_strings' => array('level', 'levels'),
        ),
        array(
            'option_name' => 'category',
            'vocab_name' => 'categories',
            'query_strings' => array('category', 'categories'),
        ),
        array(
            'option_name' => 'subject',
            'vocab_name' => 'subjects',
            'query_strings' => array('subject', 'subjects', 'subcategories'),
        ),
        array(
            'option_name' => 'specialty',
            'vocab_name' => 'specialties',
            'query_strings' => array('specialty', 'specialties'),
        ),
        array(
            'option_name' => 'country',
            'vocab_name' => 'countries',
            'query_strings' => array('country', 'countries'),
        ),
        array(
            'option_name' => 'state',
            'vocab_name' => 'states',
            'query_strings' => array('state', 'states'),
        ),
    );

    $g = array_change_key_case(drupal_get_query_parameters($_GET, array('q', 'page')), CASE_LOWER);
    foreach($queryStrings as $qs){

        foreach($qs['query_strings'] as $v){

            if(!empty($g[$v])){
                $options[$qs['option_name']] = eddy_listing_get_is_ids_from_qs($g[$v]);
            }

        }

    }

}

/**
 * Pull out the IDs from the a Particular QS Paramater
 */
function eddy_listing_get_is_ids_from_qs($qs_value){

    $output = array();

    $qs_array = explode(",", $qs_value);

    foreach($qs_array as $qs_value){

        if(is_numeric($qs_value)){

            $output[] = $qs_value;

        }

    }

    return $output;

}


/**
 * Gets the IS ID from a taxonomy field.
 */
function eddy_listings_get_external_ids_from_term_field($field) {

	$output = array();

	if(!empty($field['und'])){
		foreach($field['und'] as $key => $value){

			if(isset($field['und'][$key]['taxonomy_term'])){

                //68384 -- handle the external id could have multiple values
                if(!empty($field['und'][$key]['taxonomy_term']->field_external_id) && strpos($field['und'][$key]['taxonomy_term']->field_external_id['und']['0']['value'], ",") !== false){
                    $values = explode(",", $field['und'][$key]['taxonomy_term']->field_external_id['und']['0']['value']);
                    foreach($values as $value){
                        $output[] = $value;
                    }

                }else{
				    $output[] = $field['und'][$key]['taxonomy_term']->field_external_id['und']['0']['value'];
                }

			}
			else{
				$tax_term = taxonomy_term_load($field['und'][$key]['tid']);

                //68384 -- handle the external id could have multiple values
                if(!empty($tax_term->field_external_id) && strpos($tax_term->field_external_id['und']['0']['value'], ",") !== false){
                    $values = explode(",", $tax_term->field_external_id['und']['0']['value']);
                    foreach($values as $value){
                        $output[] = $value;
                    }

                }else{
				    $output[] = $tax_term->field_external_id['und']['0']['value'];
                }
			}
		}
	}

	return $output;

}

/**
 * Return an associative array of text value of sortBy_value.
 */
function get_drupal_sort_name_text($sortBy, $data) {

	switch ($sortBy) {
		case 'types':
			$sortBy_value = $data->ProgramTypeId;
			break;
		case 'subjects':
			$sortBy_value = $data->SubjectId;
			break;
		case 'categories':
			$sortBy_value = $data->CategoryId;
			break;
		default:
			$sortBy_value = $data->ProgramLevelId;
			$sortBy == 'levels';
			break;
	}

	//Added temporarily to fix an N+1 Query. This needs to be fixed by getting all values as an aggregate outside of the loop.
	if($sortBy == 'levels'){

		switch ($sortBy_value){
			case 2:
				$sort_name = "Associate";
				break;
			case 3:
				$sort_name = "Bachelor";
				break;
			case 4:
				$sort_name = "Certificate";
				break;
            case 18:
				$sort_name = "Certificate";
				break;
            case 11:
				$sort_name = "Certificate";
				break;
			case 5:
				$sort_name = "Continuing Education";
				break;
			case 6:
				$sort_name = "Course";
				break;
			case 7:
				$sort_name = "Doctorate";
				break;
			case 8:
				$sort_name = "Master";
				break;
			case 11:
				$sort_name = "Graduate";
				break;
			case 12:
				$sort_name = "High School";
				break;
			case 22:
				$sort_name = "Diploma";
				break;
			default:
				$sort_name = "Unknown";
				break;
		}

		$output['name'] = $sort_name;

		return $output;

	}else{
		$query = db_select('field_data_field_external_id', 'f');
		$query->join('taxonomy_term_data', 't', 'f.entity_id = t.tid');
		$query
			->fields('t', array('name'))
			->condition('f.bundle', $sortBy)
			->condition('f.field_external_id_value', $sortBy_value);

		return $query->execute()->fetch();
	}

}

/**
 * Returns the nodes
 * @param string Entity Type
 * @param array() IS Ids
 * @param bool Published Only
 */
function eddy_listing_get_nodes($type, $ids = array(), $only_published = true) {

    $nodes = array();

    try{

        if(empty($ids) && $cache = cache_get("eddy_listing_cache_$type-$only_published")){

            $nodes = $cache->data;

        }else{

	        $query = new EntityFieldQuery();
	        $query = $query
		        ->entityCondition('entity_type', 'node')
		        ->entityCondition('bundle', $type);

            if($only_published){
                $query->propertyCondition('status', 1);
            }

            if(!empty($ids)){
                $query->fieldCondition('field_external_id', 'value', $ids);
            }

            //Allows Other modules to alter this Query by using hook_query_TAG_alter
            $query->addTag('eddy_listing_get_nodes');

            $results = $query->execute();

	        if (isset($results['node'])) {
                $nids = array_keys($results['node']);
                $nodes = entity_load('node', $nids);

                if(empty($ids)){
                    cache_set("eddy_listing_cache_$type-$only_published", $nodes);
                }
	        }

        }

    }
    catch(Exception $e){

        if(module_exists('devel')){
            dpm($e);
        }

    }

	return $nodes;

}

/**
 * Returns the URL for the Request Info Links.
 */
function eddy_listing_request_url($details) {

    $output = "";

    if(module_exists('eddy_forms_engine')){

        $program_id = 0;
        if(!empty($details->ProgramId)){

            $program_id = $details->ProgramId;

        }

        if(!empty($details->form_alias)){

            $output = get_eddy_form_url_by_alais_program_id($details->form_alias, $program_id);

        }else if(!empty($details->InstitutionId)){

            $institution_id = $details->InstitutionId;
            $output = get_eddy_form_url_by_institution_program_id($institution_id, $program_id);

        }

    }

    #logic for Clicks Link.

    //Lets Other Modules Alter the Request URL:
    drupal_alter('eddy_listing_request_url', $output, $details);

    return $output;

}

/**
 * Returns the URL for the Request Info Links.
 */
function eddy_listing_request_link($link_text, $details, $link_options = array()) {

    $output = $link_text;

    $url = trim(eddy_listing_request_url($details), '/');

    $link_options['html'] = TRUE;

    if(!empty($url) && eddy_listing_show_request_link($details)){

        $output = l($link_text, $url, $link_options);

    }

    return $output;

}

/**
 * Returns the URL for a details link
 */
function eddy_listing_details_url($details) {

    $output = eddy_listing_request_url($details);

    //Lets Other Modules Alter the Details URL:
    drupal_alter('eddy_listing_details_url', $output, $details);

    return $output;

}

/**
 * Returns the Link for the Details Page. Will default to the Request Link if unaltered.
 */
function eddy_listing_details_link($link_text, $details, $link_options = array()) {

    $url = trim(eddy_listing_details_url($details), '/');

    if(!empty($url)){

        $output = l($link_text, $url, $link_options);

    }else{

        $output = $link_text;

    }

    return $output;

}

/**
 * Returns the Visit Link if Allowed
 */
function eddy_listing_visit_link($link_text, $details, $link_options = array()) {

    $output = "";

    if(eddy_listing_show_visit_link($details))
    {

        if(isset($details->ClickTrackingAttributes) && !empty($details->ClickTrackingAttributes)){

            if(isset($link_options['attributes'])){
                $link_options['attributes'] = array_merge($link_options['attributes'], $details->ClickTrackingAttributes);
            }else{
                $link_options['attributes'] = $details->ClickTrackingAttributes;
            }

            $link_options['attributes']['data-redirect-url'] = $details->ClickThroughUrl;
            $link_options['html'] = TRUE;
            $link_options['fragment'] = FALSE;
            $link_options['external'] = TRUE;

            $output = l($link_text, NULL, $link_options);

        }

    }

    return $output;

}

/**
 * Returns TRUE or FALSE if the Request Link should be shown.
 */
function eddy_listing_show_request_link($program){

    $output = FALSE;

    if(!$program->FailedValidation && !$program->InquiryDisabled){

        $output = TRUE;

    }

    drupal_alter('eddy_listing_show_request_link', $output, $program);

    return $output;

}

/**
 * Returns TRUE or FALSE if the Visit Link should be shown.
 */
function eddy_listing_show_visit_link($program){

    $output = FALSE;

    if(!$program->FailedValidation && !empty($program->ClickThroughUrl) && $program->ShowClickThroughLink && $program->PaidStatusTypeId == 3){

        $output = TRUE;

    }

    drupal_alter('eddy_listing_show_visit_link', $output, $program);

    return $output;

}

/**
 * Return an associative array of the custom List by listing id.
 */
function eddy_listing_get_list_fields($list_id) {

    try{

        $query = db_select('eddy_listing', 'l')
        ->fields('l')
        ->condition('id', $list_id);
        return $query->execute()->fetch();

    }
    catch(Exception $e){

        if(module_exists('devel')){
            dpm($e);
        }

    }

}


/**********************************
REGION: DATA MANIPULATION FUNCTIONS
 ***********************************/
//Adds Row Classes
function setClasses($list, $index, $totalCount) {
	$count = $index;
	$count++;
	$classes = 'listing-row';
	$classes .= ' listing-row-' . $count;
	$classes .= ' listing-row-' . ($count % 2 ? 'odd' : 'even');

	if ($count == 1 && !($count == 1)) {
		$classes .= ' listing-row-first';
	}
	if ($count == $totalCount && !($count == 1)) {
		$classes .= ' listing-row-last';
	}
	if($totalCount == 1) {
		$classes .= ' listing-row-single';
	}
	if(!empty($list[$index]))
		$list[$index]->classes = $classes;

}

/*Function to allow sorting by one of 4 values by passing in the array of
 *listings as well as the value you would like to sort by.  Values are:
 * 1.Program Types[types] - Ex: Degrees, Courses
 * 2.Subjects[subjects] - Ex: Accounting
 * 3.Categories[categories] - Ex: Arts & Religion
 * 4.Degree Levels[levels] - Ex: Associates, Bachelors
 **/
function sort_by_key(array $array, $key, $asc = true) {
	switch ($key) {
		case 'types':
			$sortKey = 'ProgramType';
			break;
		case 'subjects':
			$sortKey = 'SubjectId';
			break;
		case 'categories':
			$sortKey = 'CategoryId';
			break;
		default:
			$sortKey = 'ProgramLevelId';
			break;
	}

    foreach ($array as $id => $value) {

		if ($sortKey == 'ProgramLevelId'){
			$array[$id]->sortKey = get_program_level_sort_order(isset($value->$sortKey) ? $value->$sortKey : '');
		}
		else{
			$array[$id]->sortKey = isset($value->$sortKey) ? $value->$sortKey : '';
		}
    }

	if ($sortKey == 'SubjectId'){
		$array = eddy_listing_sort_by_subject($array);
	}
	else {
		usort($array, "sortby_sortKey_Name");
	}

    return $array;
}

function sortbyName($x, $y) {
	if ($x->InstitutionName == $y->InstitutionName)
		return 0;
	else if ($x->InstitutionName < $y->InstitutionName)
		return -1;
	else
		return 1;
}

function sortby_sortKey_Name($x,$y){
	$retval = strnatcmp($x->sortKey, $y->sortKey);
	if(!$retval) return strnatcmp($x->ProgramName, $y->ProgramName);
	return $retval;
}

function eddy_listing_sort_by_subject($array){

    if(!empty($array)){
        foreach ($array as $key => $row) {
            $name[$key] = $row->ProgramName;
            $sortText[$key] = $row->sort_text;
        }
        array_multisort($sortText, SORT_ASC, $name, SORT_ASC, $array);
    }
	return $array;
}

//RETRIEVES THE ORDER FOR GROUPING THE PROGRAMS BY DEGREE LEVEL.
//A SPECIFIC ORDER WAS REQUESTED AND NOT BY PROGRAMLEVELID.
//EX: ASSOC(2), BACH(3), MAST(8), DOCT(7), CON ED(5,6)
//INSTEAD OF: ASSOC(2), BACH(3), CON ED(5,6), DOCT(7), MAST(8)
function get_program_level_sort_order($value){
	switch ($value){
		case 2:
			$sort_order = 2;
			break;
		case 3:
			$sort_order = 3;
			break;
		case 8:
			$sort_order = 4;
			break;
		case 7:
			$sort_order = 5;
			break;
		case 5:
			$sort_order = 6;
			break;
		case 6:
			$sort_order = 6;
			break;
		default:
			$sort_order = 7;
			break;
	}

	return $sort_order;
}

/**************************************
END REGION: DATA MANIPULATION FUNCTIONS
 ***************************************/


function eddy_listing_form_alter(&$form, &$form_state, $form_id){

	if($form_id == 'eddy_core_custom_site_settings_form'){

		$form['listing_text'] = array(
			'#type' => 'textfield',
			'#title' => t('Listing Add Text'),
			'#default_value' => (variable_get('listing_text')=='')?'':variable_get('listing_text'),
			'#maxlength' => 255,
			'#size' => 100,
			'#weight'=>11,
			'#description' => t('Text to show on listing page.'),
		);

		$form['#submit'][] = 'saveListingText';
	}
}

function saveListingText($form, &$form_state){
	variable_set('listing_text', $form_state['values']['listing_text']);
}

/**
 * Returns the logo size
 *
 * @param $list_fields
 *   Array of listings field options
 * @return
 *  Size of the logo .
 */
function eddy_listing_convert_logo_size($list_fields){

    $output = 150;

    if(!empty($list_fields) && isset($list_fields->logo_size)){
        if($list_fields->logo_size == '240x80'){
            $output = 240;
        }elseif($list_fields->logo_size == '120x40'){
            $output = 120;
        }
    }

    return $output;
}

/**
 * Returns the logo SRC (URL)
 *
 * @param String
 *   image tag
 * @return
 *  logo url
 */
function eddy_listing_extract_logo_url($img){

    $output = "";

    if(!empty($img)){

        $pattern = '/src="([^"]*)"/';
        preg_match($pattern, $img, $matches);

        if(!empty($matches[1]))
            $output = $matches[1];
    }

    return $output;
}