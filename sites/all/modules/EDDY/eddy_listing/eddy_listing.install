<?php

/**
 * @file
 * Install and un-install tasks live in this file.
 */
/**
 * Implements hook_schema().
 */

function eddy_listing_schema() {
    $schema['eddy_listing'] = array(
      'description' => 'Store all listings.',
      'fields' => array(
        'id' => array(
          'description' => 'The id of the listing.',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'name' => array(
          'description' => 'The name of the listing.',
          'type' => 'varchar',
          'length' => 50,
          'not null' => TRUE,
          'default' => '',
        ),
        'machine_name' => array(
          'type' => 'varchar',
          'length' => 64,
          'not null' => TRUE,
          'default' => '',
        ),
        'type' => array(
          'description' => 'The type of the listing.',
          'type' => 'varchar',
          'length' => 50,
          'not null' => TRUE,
          'default' => '',
        ),
        'featured' => array(
          'description' => 'Whether this listing is a featured listing or not.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_pager' => array(
          'description' => 'Whether to show the pager or not.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_pager_location' => array(
          'description' => 'Where to display pager.',
          'type' => 'varchar',
          'length' => 50,
          'not null' => TRUE,
          'default' => '',
        ),
        'user_change_records' => array(
          'description' => 'Whether allow user to change view records when browsing product list page.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'description' => array(
          'description' => 'The description of the listing.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
          'default' => '',
        ),
        'show_school_logo' => array(
          'description' => 'Whether to show the school logo.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_school_title' => array(
          'description' => 'Whether to show the school title.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_school_description' => array(
          'description' => 'Whether to show the school description.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_program_title' => array(
          'description' => 'Whether to show the program title.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_program_description' => array(
          'description' => 'Whether to show the program description.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_degree_info_button' => array(
          'description' => 'Whether to show the degree info button.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_school_info_button' => array(
          'description' => 'Whether to show the school info button.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'show_request_info_button' => array(
          'description' => 'Whether to show the request info button.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'total_records_to_display' => array(
          'description' => 'The number of records to display.',
          'type' => 'varchar',
          'length' => 3,
          'not null' => TRUE,
          'default' => '10',
        ),
        'logo_count' => array(
          'description' => 'The number of records to display a logo for.',
          'type' => 'varchar',
          'length' => 3,
          'not null' => TRUE,
          'default' => 'ALL',
        ),
        'logo_size' => array(
          'description' => 'The size of the logo to display.',
          'type' => 'varchar',
          'length' => 25,
          'not null' => FALSE,
        ),
        'sort' => array(
          'description' => 'Whether you want the results sorted in a specific order.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'sort_by' => array(
          'description' => 'What you would like to sort by.',
          'type' => 'varchar',
          'length' => 25,
          'not null' => FALSE,
        ),
        'group_by' => array(
          'description' => 'Would you like to group the sorted list.',
          'type' => 'int',
          'not null' => FALSE,
          'default' => 0,
        ),
       'featured_list' => array(
          'description' => 'Features list ID',
          'type' => 'int',
          'not null' => FALSE,
          'default' => null,
        ),
        'include_types' => array(
          'description' => 'Program Type IDs',
          'type' => 'varchar',
          'length' => 128,
          'not null' => FALSE,
          'default' => '',
         ),
         'include_campus_types' => array(
          'description' => 'Campus Type IDs',
          'type' => 'varchar',
          'length' => 128,
          'not null' => FALSE,
          'default' => '',
        ),
        'online_when_empty' => array(
          'description' => 'Show Online results when a Campus empty.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),
        'random_item_from_list' => array(
           'description' => 'A boolean field to show one random record at a time.',
           'type' => 'int',
           'size' => 'tiny',
           'unsigned' => TRUE,
           'not null' => TRUE,
           'default' => 0,
        ),
        'filter_source' => array(
           'description' => 'Determines where the filters come from.',
           'type' => 'varchar',
           'length' => 50,
           'not null' => TRUE,
           'default' => 'none',
        ),
        //Added for Campus Support.
        'show_nested_programs' => array(
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'default' => 0,
        ),
        'nested_record_count' => array(
          'type' => 'int',
          'default' => 0,
        ),
        'attach_list' => array(
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'default' => 0,
        ),
        'attached_list_id' => array(
          'type' => 'int',
          'default' => 0,
        ),
        'display_type' => array(
          'description' => 'Display Type - Vertical or Horizontal',
          'type' => 'varchar',
          'length' => 54,
          'default' => '',
        ),
        'show_nested_campuses' => array(
          'type' => 'int',
          'default' => 0,
        ),
        'remove_capped' => array(
          'description' => 'Whether remove capped results.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ),

        'listing_in_html' => array(
          'description' => 'Render listings in the HTML on page load.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 1,
        ),

        //'prevent_empty_blocks' => array(
        //  'description' => 'Make a call to the Listings to prevent empty blocks.',
        //  'type' => 'int',
        //  'size' => 'tiny',
        //  'unsigned' => TRUE,
        //  'not null' => TRUE,
        //  'default' => 1,
        //),

      ),
      'primary key' => array('id'),
    );

    $schema['cache_eddy_listing_data'] = drupal_get_schema_unprocessed('system', 'cache');

    return $schema;

}



/**
 * Implements hook_update_N()
 *
 * Add the 'featured_list' column.
 */
function eddy_listing_update_7000() {

	//Define the new field
	$field = array(
		'description' => 'Features list ID',
		'type' => 'int',
		'not null' => FALSE,
		'default' => null,
	);

	db_add_field('eddy_listing', 'featured_list', $field);

	return t('The featured list data field has been added.');
}


/**
 * Implements hook_update_N()
 *
 * Add the 'include_types' column.
 */
function eddy_listing_update_7001() {

	//Define the new field
	$field = array(
		'description' => 'Program Type IDs',
		'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
		'default' => '',
	);

	db_add_field('eddy_listing', 'include_types', $field);

	return t('The "include_types" data field has been added.');
}


/**
 * Implements hook_update_N()
 *
 * Add the 'show_pager_location' and 'user_change_records' columns.
 */
function eddy_listing_update_7005() {

	//Define the new field
	$field_1 = array(
		'description' => 'Where to display pager.',
        'type' => 'varchar',
		'length' => 50,
        'not null' => TRUE,
        'default' => '',
		);
	$field_2 = array(
		'description' => 'Whether allow user to change view records when browsing product list page.',
        'type' => 'int',
        'size' => 'tiny',
		'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
		);

	if(!db_field_exists('eddy_listing', 'show_pager_location'))
		db_add_field('eddy_listing', 'show_pager_location', $field_1);

	if(!db_field_exists('eddy_listing', 'user_change_records'))
		db_add_field('eddy_listing', 'user_change_records', $field_2);

	return t('The "show_pager_location" and "user_change_records" data fields have been added.');
}

/**
 * Implements hook_update_N()
 *
 * Add the "cache_eddy_listing_data" table.
 */
function eddy_listing_update_7003() {

	db_create_table('cache_eddy_listing_data', drupal_get_schema_unprocessed('system', 'cache'));
	return t('The caching table has been created for EDDY Listings Data.');

}


/**
 * Implements hook_update_N()
 *
 * Add the "use_aggregation" column.
 */
function eddy_listing_update_7004() {

	//Define the new field
	$field1 = array(
        'description' => 'A boolean field to show one random record at a time.',
        'type' => 'int',
		'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
	);

	db_add_field('eddy_listing', 'random_item_from_list', $field1);

	//Define the new field
	$field2 = array(
		'description' => 'Determines where the filters come from.',
        'type' => 'varchar',
		'length' => 50,
        'not null' => TRUE,
        'default' => 'none',
	);

	db_add_field('eddy_listing', 'filter_source', $field2);

	return t('The "random_item_from_list" and "filter_source" field has been added.');

}


/**
 * Implements hook_update_N()
 *
 * Add Campus Related Fields.
 */
function eddy_listing_update_7011() {

	//Define the new field
	$field = array(
		'type' => 'int',
		'size' => 'tiny',
		'unsigned' => TRUE,
        'default' => 0,
	);

	db_add_field('eddy_listing', 'show_nested_programs', $field);

	$field1 = array(
		'type' => 'int',
        'default' => 0,
	);

	db_add_field('eddy_listing', 'nested_record_count', $field1);

	$field2 = array(
		'type' => 'int',
		'size' => 'tiny',
		'unsigned' => TRUE,
        'default' => 0,
	);

	db_add_field('eddy_listing', 'attach_list', $field2);

	$field3 = array(
		'type' => 'int',
        'default' => 0,
	);

	db_add_field('eddy_listing', 'attached_list_id', $field3);

	$field4 = array(
		'description' => 'Campus Type IDs',
		'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
		'default' => '',
	);

	db_add_field('eddy_listing', 'include_campus_types', $field4);

	//Removed these fields as they are not used with matching engine.
	db_drop_field('eddy_listing', 'listing_page');
	db_drop_field('eddy_listing', 'use_aggregation');
	db_drop_field('eddy_listing', 'aggregation_list');

	return t('Campus updates have been made to the Listings Databse.');
}

/**
 * Implements hook_update_N()
 *
 * Add Campus Related Fields.
 */
function eddy_listing_update_7012() {

	$field = array(
		'type' => 'int',
        'default' => 0,
	);

	db_add_field('eddy_listing', 'show_nested_campuses', $field);

	return t('The "show_nested_campuses" Field has been added.');

}

/**
 * Implements hook_update_N()
 *
 * Add Display Type Field - Vertical or Horizontal
 */
function eddy_listing_update_7013() {

	$field = array(
		'description' => 'Display Type - Vertical or Horizontal',
		'type' => 'varchar',
		'length' => 54,
		'default' => '',
	);

	db_add_field('eddy_listing', 'display_type', $field);

	return t('The "display_type" Field has been added');
}

/**
 * Field to Show Online Schools when a Particular Campus list is empty.
 */
function eddy_listing_update_7014() {

	$field = array(
		'description' => 'Show Online results when a Campus empty.',
        'type' => 'int',
        'size' => 'tiny',
		'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
	);

	db_add_field('eddy_listing', 'online_when_empty', $field);

	return t('The "online_when_empty" Field has been added');
}


/**
 * Field to Remove Capped Out Results.
 */
function eddy_listing_update_7015() {

	$field = array(
        'description' => 'Whether remove capped results.',
        'type' => 'int',
		'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      );

	db_add_field('eddy_listing', 'remove_capped', $field);

	return t('The "remove_capped" Field has been added');
}


/**
 * Advanced Rendering fields added.
 */
function eddy_listing_update_7016() {

	$field = array(
        'description' => 'Render listings in the HTML on page load.',
        'type' => 'int',
		'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      );

	db_add_field('eddy_listing', 'listing_in_html', $field);

    //$field = array(
    //    'description' => 'Make a call to the Listings to prevent empty blocks.',
    //    'type' => 'int',
    //    'size' => 'tiny',
    //    'unsigned' => TRUE,
    //    'not null' => TRUE,
    //    'default' => 1,
    //  );

    //db_add_field('eddy_listing', 'prevent_empty_blocks', $field);

	return t('The "listing_in_html" field has been added');

}

/**
 * Add show_non_for_profit_list Field.
 */
function eddy_listing_update_7017() {

	$field = array(
		'type' => 'int',
        'default' => 0,
	);

	db_add_field('eddy_listing', 'show_non_for_profit_list', $field);

	return t('The "show_non_for_profit_list" Field has been added.');

}