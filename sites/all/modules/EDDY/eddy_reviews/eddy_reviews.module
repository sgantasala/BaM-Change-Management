<?php

define('EDDY_REVIEW_IMAGE_PATH', 'public://reviews/');
define('EDDY_REVIEW_ADMIN_PATH', 'admin/reviews/');
/**
 * Implements hook_init().
 */
function eddy_reviews_init(){
    //image upload field will refresh the form which needs include review add form all the time 
    module_load_include('inc', 'eddy_reviews', 'eddy_reviews_management');
}
/**
 * Implements hook_menu().
 */
function eddy_reviews_menu() {

    $items['admin/reviews/list'] = array(
      'title' => 'List',
      'access callback' => 'user_access',
      'access arguments' => array('browse reviews'), 
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['admin/reviews/setting'] = array(
      'title' => 'Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_reviews_setting'),
      'access callback' => 'user_access',
      'access arguments' => array('browse reviews'), 
      'type' => MENU_LOCAL_TASK,
      'file' => 'eddy_reviews_setting.inc',
    );
    $items['admin/reviews/add/%/%'] = array(
      'title' => 'Reviews',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_reviews_add', 3, 4),
      'access callback' => TRUE,
      //'file' => 'eddy_reviews_management.inc',
    );
    $items['admin/reviews/edit/%'] = array(
      'title' => 'Reviews',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eddy_reviews_edit', 3),
      'access callback' => 'user_access',
      'access arguments' => array('publish reviews'), 
      //'file' => 'eddy_reviews_management.inc',
    );

    $items['admin/reviews/status/%/%'] = array(
      'title' => 'Change Review Status',
      'page callback' => 'eddy_reviews_status_change',
      'page arguments' => array(3,4),
      'access callback' => 'user_access',
      'access arguments' => array('publish reviews'),
      //'file' => 'eddy_reviews_management.inc',
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function eddy_reviews_permission() {
    return array(
      'browse reviews' => array(
        'title' => t('Browse Reviews'),
      ),
      'publish reviews' => array(
        'title' => t('Publish or Edit Reviews'),
      ),
    );
}

/**
 * Implements hook_theme().
 */
function eddy_reviews_theme() {
    return array(
       'eddy_reviews_on_listing' => array(
          'template' => 'templates/eddy-reviews-on-listing',
          'variables' => array('reviews' => NULL),
       ),
       'eddy_reviews_on_detail' => array(
          'template' => 'templates/eddy-reviews-on-detail',
          'variables' => array('previews' => NULL),
       ),
      'eddy_reviews_preview_upload' => array(
          'render element' => 'element',
          //'file' => 'eddy_reviews_management.inc',
      ),

    );
}
$form_state['redirect'] = EDDY_REVIEW_ADMIN_PATH;


/**
 * Implements hook_block_info().
 */
function eddy_reviews_block_info() {

    $blocks['eddy_review_widget_on_listing'] = array(
      'info' => t('EDDY Reviews: Recent Reviews Widget on listing page'), 
      'status' => 1,
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => 1,
      'region' => 'sidebar_first',
      'pages' => '<front>',
      'theme' => 'sab_bootstrap',
      'weight' => '-1',
    );
    $blocks['eddy_review_widget_on_detail'] = array(
      'info' => t('EDDY Reviews: Reviews Widget on detail page'), 
      'status' => 1,
      'cache' => DRUPAL_NO_CACHE,
      'visibility' => 1,
      'region' => 'content_column_two',
      'theme' => 'sab_bootstrap',
      'weight' => '2',
    );
    
    return $blocks;
    
}

/**
 * Implements hook_block_view().
 */
function eddy_reviews_block_view($delta = '') {
    
    $data = array();

    switch($delta){

        case 'eddy_review_widget_on_listing':
            $data['subject'] = "";
            $data['content'] = array('#markup' => get_reviews_on_listing());
            break;
        case 'eddy_review_widget_on_detail':
            $data['subject'] = "Program Reviews";
            $data['content'] = array('#markup' => get_reviews_on_detail());
            break;
    }    
    
    return $data;
}

/**
 * Implements hook_flush_caches().
 */
function eddy_reviews_flush_caches() {
	cache_clear_all('*', 'cache_eddy_reviews', TRUE);
}
/**
 * Implements hook_mail().
 */
function eddy_reviews_mail($key, &$message, $params) {
    $message['subject'] = t("Please publish reviews", $params);
    $message['body'] = array();
    $message['body'][] = t("From: ". variable_get('eddy_core_application_name','elearners'), $params);
    $message['body'][] = t("A new review \"@title\" has been submited for @associate(@url). Click @review_url to edit, approve, and publish the review", $params);
}
/**
 * Implements hook_entity_info().
 * New custom entity type
 */
function eddy_reviews_entity_info() {

    $return = array(    
      'eddy_reviews' => array(
        'label' => t('Reviews'),
        'module' => 'eddy_reviews',
        'controller class' => 'EntityAPIController',
        //'entity class' => 'Reviews',
        'base table' => 'eddy_reviews',
        'fieldable' => TRUE,
        'entity keys' => array(
          'id' => 'rid',
        ),
        'views controller class' => 'EntityDefaultViewsController',
      ),

      'eddy_reviews_associate_base' => array(
        'label' => t('Associate Info in Reviews'),
        'module' => 'eddy_reviews',
        'controller class' => 'EntityAPIController',
        'base table' => 'eddy_reviews_associate_base',
        'fieldable' => TRUE,
        'entity keys' => array(
          'id' => 'bid',
        ),
        'views controller class' => 'EntityDefaultViewsController',
      ),

      'eddy_reviews_associate_mapping' => array(
        'label' => t('Associate Mapping'),
        'module' => 'eddy_reviews',
        'controller class' => 'EntityAPIController',
        'base table' => 'eddy_reviews_associate_mapping',
        'fieldable' => TRUE,
        'entity keys' => array(
          'id' => 'mid',
        ),
        'views controller class' => 'EntityDefaultViewsController',
      ),
    );    

    return $return;
}


/**
 * Implements hook_views_api().
 *
 * Enabling using templates inside module
 */
function eddy_reviews_views_api() {
    return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'eddy_reviews') . '/views',
      'template path' => drupal_get_path('module', 'eddy_reviews') . '/views',
    );
}

function eddy_reviews_status_change($rid, $op='', $ajaxcall = true){
    global $user;   

    try{
        if($op != ''){
            
            $new_status = '0';
            
            $output = '';

            switch(strtolower($op)){
                case "publish":
                    $new_status = '2';
                    $output = 'Published';
                    break;
                case "delete":
                    $new_status = '3';
                    $output = 'Deleted';
                    break;
                case "approve":
                    $new_status = '1';
                    $output = 'Approved';
                    break;
            }
            
            $associate_id = array();
            $query = db_select('eddy_reviews', 'r');
            $query->join('eddy_reviews_associate_base', 'a', 'r.bid = a.bid');
            $query->fields('a', array('associate_id', 'bid'));
            $query->condition('r.rid', $rid, '=');
            $associate_id = $query->execute()->fetchAllAssoc('associate_id');

            
            if($new_status != '0'){
                if($new_status != '3'){
                    db_update('eddy_reviews')
                     ->fields(array(
                        'status' => $new_status,                        
                        'updated' => REQUEST_TIME,
                        'updated_uid' =>$user->uid,
                      )
                    )
                    ->condition('rid', $rid)
                    ->execute();

                    //update average rating after published
                    update_avg_rating($rid);

                }else{
                    //update average rating before delete
                    if(!empty($associate_id))
                        update_avg_rating($rid, $associate_id[key($associate_id)]->bid, true);
                    else
                        update_avg_rating($rid, 0, true);

                    db_delete('eddy_reviews')
                        ->condition('rid', $rid)
                        ->execute();
        
                }
                global $base_url;
                
                cache_clear_all('*', 'cache_eddy_reviews', TRUE);
                
                //clear associated program page cache
                if(!empty($associate_id)){
                    if(module_exists('sab_program_details') && function_exists('sab_program_details_get_program_details')){
                        $associate = sab_program_details_get_program_details(key($associate_id));
                        if($associate){
                            $cid = eddy_listing_request_url($associate);
                        }
                    }
                    
                    cache_clear_all($base_url . '/' .$cid, 'cache_page', TRUE);                
                }

                //only ajax call will print and exit()
                //only on management listing page will need print to change colomns without fresh page.            
                if($ajaxcall){
                    print $output;
                    
                    drupal_exit();
                }
            }
        }

    }
    catch(Exception $e){
        dpm($e);
    }
}
/**
 * Custom theme.
 *
 * render element for image upload
 */
function theme_eddy_reviews_preview_upload($variables) {

    $element = $variables['element'];

    $output = '';

    $base = drupal_render_children($element); // renders element as usual

    if($element['fid']['#value'] != 0) {
        // if image is uploaded show its thumbnail to the output HTML
        $output .= '<div class="multifield-thumbnail">';
        $output .= theme('image_style', array('style_name' => 'thumbnail', 'path' => file_load($element['fid']['#value'])->uri, 'getsize' => FALSE));
        $output .= '</div>';
        $output .= $base;
    }
    return $output;
}

/** 
 * Custom function to get latest 5 review related to current program list page countries/cities/program types
 **/
function get_reviews_on_listing(){ 

    $is_product_list = false;
    $reviews = array();

    try{
        //add product-list-page class to product_list and product list node page
        if(module_exists('sab_product_list') && function_exists('sab_product_list_show_block') && sab_product_list_show_block()){
            $is_product_list = true;
        }
        drupal_alter('eddy_reviews_product_list_show_block',$is_product_list);

        if($is_product_list){

            $filters = array();
            $options = array();

            $cid = current_path();

            //match the criteria (country/city/program type) of the page
            $items = explode(",", variable_get('eddy_reviews_product_list_criteria'));
            if(module_exists('sab_product_list') && function_exists('get_sab_product_list_current_product_list')){
                $options = get_sab_product_list_current_product_list();
            }
            $start_time = date('s') . substr((string)microtime(), 1, 7);

            if ($cache = cache_get($cid, 'cache_eddy_reviews')) {

                $reviews = $cache->data;

            }else{
                drupal_alter('eddy_reviews_product_list_options',$options);

                foreach($items as $item){
                    foreach($options->listing_options as $type => $value){
                        //compare items from settings to mapping items from product list page

                        if(trim($item) == trim($type)){
                            $filters[] = array(
                                'type' => strtolower(trim($item)),
                                'isid' => $value[0],
                                );
                        }
                    }
                }

                $recent_count = (int)(variable_get('eddy_reviews_recent_count'));//from user's setting
                $found = 0;
                $options = array();
                //1. try match country/city/program type of the page
                //2. try match country/city
                //3. try match country
                //4. try no criteria
                global $user;

                for ($try = 0; $try < count($filters)+1; $try++) {   

                    if($found >= $recent_count)
                        break;

                    $sub_query = 'SELECT m1.bid from {eddy_reviews_associate_mapping} m1 ';             
                    $query_condition = 'where 1>0';
                    if($try!=count($filters)){
                        for($index=0; $index < count($filters)-$try; $index++){                                   
                            
                            if($index>=$try && $index!=0){                  
                                $sub_query .= 'left join {eddy_reviews_associate_mapping} m' . ($index+1) . ' on m'. ($index+1) .'.bid = m1.bid ';
                                $query_condition .= " and (m".($index+1) .".mname='" . $filters[$index]['type'] . "' and m".($index+1) .".misid = '" . $filters[$index]['isid'] . "')";
                                
                            }elseif($index==0){
                                $query_condition .= " and (m1.mname='" . $filters[$index]['type'] . "' and m1.misid = '" . $filters[$index]['isid'] . "')";
                            }

                        }
                    }else{
                        $query_condition = ' group by m1.bid';
                    }

                    $criteria = db_query($sub_query . $query_condition)->fetchCol();
                    $mapping_bids = '';

                    //build mapping bid as string seperate by ","
                    $mapping_bids = implode(',',$criteria);
                    
                    if($mapping_bids != ''){
                        $results = db_query("SELECT r.rid, r.bid, b.associate_id, b.associate_name, b.btype, r.title, r.description, r.rating, r.recommended from {eddy_reviews_associate_base} b
        left join {eddy_reviews} r on b.bid = r.bid 
        where r.status='2' and r.bid in (" . $mapping_bids . ")
        order by r.created DESC")->fetchAllAssoc('rid');

                        foreach($results as $rvalue){
                            if(!array_key_exists($rvalue->associate_id, $reviews)){
                                $reviews[$rvalue->associate_id] = $rvalue;
                                if($rvalue->btype == 'program')
                                    $options['program'][] = $rvalue->associate_id;
                                //else
                                //    $options['institution'][] = $rvalue->associate_id;
                                $found++;
                            }
                            if($found >= $recent_count){
                            
                                break;
                            }
                        }
                        
                    }    
                    
                }

                //get associate details
                $associateDetails = array();
                if(!empty($options['program'])){
                    $details = eddy_services_get_listings($options, "GetPrograms");

                    if(isset($details->GetProgramsResult) && !empty($details->GetProgramsResult->ProgramList)){    

                        foreach($details->GetProgramsResult->ProgramList as $detail){
                            $associateDetails[$detail->ProgramId] = $detail;
                        }
                    }
                }

                //if program details not back from ME, remove it from reviews
                foreach($reviews as $key=>$review){
                    if(array_key_exists($review->associate_id, $associateDetails))
                        $review->associate_detail = $associateDetails[$review->associate_id];
                    else
                        unset($reviews[$key]);
                }

                cache_set($cid, $reviews, "cache_eddy_reviews"); 
            }
            $end_time = date('s') . substr((string)microtime(), 1, 7);

            $requestTime = ($end_time - $start_time);

            //dpm($requestTime);    
            return theme('eddy_reviews_on_listing', array("reviews" => $reviews));
            
        }else{
            return '';
        }
    }
    catch(Exception $e){
        dpm($e);
    }
}

/** 
 * Custom function to get latest 5 review related to current program detail page
 **/
function get_reviews_on_detail(){    
    
    try{
        if(module_exists('sab_program_details') && function_exists('is_program_details_page')){
            $is_program_detail = is_program_details_page();
        }
        drupal_alter('eddy_reviews_is_program_details_page', $is_program_detail);  
        
        if($is_program_detail){

            if(module_exists('sab_program_details') && function_exists('get_sab_program_details')){
                $program = get_sab_program_details();
            }
            
            drupal_alter('eddy_reviews_get_program_details', $program);        

            $previews = array();

            if(isset($program->programDetails) && isset($program->programDetails->ProgramId)){
                
                //PaidStatusTypeId
                //1    Free
                //2    Fraid
                //3    Paid
                //6    PaidClicks
                //if($program->programDetails->PaidStatusTypeId != 1){

                //$count = (int)(variable_get('eddy_reviews_on_detail_count'));//from user's setting

                $previews['type'] = 'program';
                $previews['associate_id'] = $program->programDetails->ProgramId;
                
                $reviews = db_query("select * 
            from {eddy_reviews} r 
            left join {eddy_reviews_associate_base} b on b.bid = r.bid
            where status='2' and b.associate_id=:associate_id
            order by r.created DESC", array(':associate_id'=>$previews['associate_id']))->fetchAll();

                $previews['reviews'] = $reviews;

                return theme('eddy_reviews_on_detail', array("previews" => $previews));
                //}else{
                //    return '<i class="no-review">Not Yet Reviewed</i>';
                //}

            }
            
        }
    }
    catch(Exception $e){
        dpm($e);
    }
}
/**
 * Custom function
 * get total of reviews 
 * */
function get_reviews_total($associate_id){
    $total = 0;
    try{
        $total = db_query("select count(*) total 
                from {eddy_reviews} r 
                left join {eddy_reviews_associate_base} b on b.bid = r.bid
                where r.status='2' and b.associate_id=:associate_id
                ", array(':associate_id'=>$associate_id))->fetchColumn();
    }catch(Exception $e){
        dpm($e);
    }
    return $total;
}

/** 
 * Custom function 
 **/
function eddy_reviews_read_more($string){
    
    
    $count = variable_get('eddy_reviews_character_count');

    if (strlen($string) > $count){

        $text = '<p>' . substr($string, 0, $count);

        //$remaining = explode(' ', substr($string, $count));
        $remaining = substr($string, $count);
        $text .= substr($remaining, 0, strpos($remaining, ' '));
        //unset($remaining[0]);
        $text .= '</p><p class="collapsed">' . substr($remaining, strpos($remaining, ' ')) . '</p>&nbsp;<a href="#" class="review-read-more">' . variable_get('eddy_reviews_read_more_text') . '</a>';

        return $text;



    }else{
        return $string;
    }
}
/** 
 * Custom function 
 * update average rating for program of the review
 **/
function update_avg_rating($rid, $bid = 0, $delete = false){
    
    try{
        $results = db_query("select r.* 
            from {eddy_reviews} r 
            where r.status='2' " . ($delete? ("and r.rid<>" . $rid):"") . " and r.bid in (select bid from {eddy_reviews} where rid = :rid)
            order by r.created DESC", array(':rid' => $rid))->fetchAll();
        
        $rating = 0;
        if(count($results) >0){
            foreach($results as $result){
                $rating += $result->rating;
                $bid = $result->bid;
            }
        }else{
            $rating = 0;
        }

        if($bid!=0){
            db_update('eddy_reviews_associate_base')
            ->fields(array(
                'avg_rating' => round($rating/count($results), 1, PHP_ROUND_HALF_UP),
            ))
            ->condition('bid', $bid)
            ->execute();
        }

    }
    catch(Exception $e){
        dpm($e);
    }
}

function get_avg_ratings($lists){
    
    $firstProgramIds = array();
    $ratings = array();
    
    try{

        foreach ($lists as $index => $list){
            if(!empty($list->ProgramList) && isset($list->ProgramList[0]->ProgramId)){
                $ProgramId = $list->ProgramList[0]->ProgramId;
                $firstProgramIds[] = $ProgramId;
            }
        }
        if(!empty($firstProgramIds)){
            $ratings = db_select('eddy_reviews_associate_base', 'a')
             -> fields('a', array('avg_rating', 'associate_id'))
             -> condition('associate_id', $firstProgramIds, 'IN')
             -> execute()->fetchAllAssoc('associate_id');
        }

        if(!empty($ratings)){
            foreach ($lists as $index => $list){
                if(!empty($list->ProgramList) && isset($list->ProgramList[0]->ProgramId)){
                    $ProgramId = $list->ProgramList[0]->ProgramId;
                    if(array_key_exists($ProgramId, $ratings))
                        $lists[$index]->ProgramList[0]->avg_rating = $ratings[$ProgramId]->avg_rating;
                }
            }
        }

    }catch(Exception $e){
    
        dpm($e);

    }

    return $lists;
}
/** 
 * Custom function 
 * get average rating for program
 **/
function get_avg_rating_html($associate_id){
    
    try{
        $rating = db_select('eddy_reviews_associate_base', 'a')
         -> fields('a', array('avg_rating'))
         -> condition('associate_id', $associate_id, '=')
         -> execute()->fetchColumn();

        if($rating !='')
            return get_rating_html($rating);
        else
            return '<i class="no-rating"></i>';
    }
    catch(Exception $e){
        dpm($e);
    }
}

/** 
 * Custom function 
 * get rating html
 **/
function get_rating_html($rating){
    
    $rating_html = '';
    $score = '';

    $whole = floor($rating);

    $fraction = $rating - $whole; // .25

    $score = "<span class=\"score\">" . number_format (floatval($rating),1) . "</span>";

    for($i = 1; $i <= $whole; $i++){
        $rating_html .= "<i class=\"fa fa-star\"></i>";
    }
    if($fraction > 0){
        $rating_html .= "<i class=\"fa fa-star-half-o\" value=\"$fraction\"></i>";
    }
    for($i=1; $i <=(5-$whole-ceil($fraction)); $i++){
        $rating_html .= "<i class=\"fa fa-star-o\"></i>";
    }

    return $score . $rating_html;
}

/** 
 * Custom function 
 * save program info to reviews_associate_info and reviews_associate_mapping
 **/

function save_associate_info($btype, $associate_id){
    
    $associate = null;

    $bid = 0;

    try{
        if($btype == "program"){
            if(module_exists('sab_program_details') && function_exists('sab_program_details_get_program_details')){
                $associate = sab_program_details_get_program_details($associate_id);
            }
            drupal_alter('eddy_reviews_get_program_details_by_id', $associate, $associate_id);       
            
            if($associate != null){
                
                //save to reviews_associate_info
                $fields_info_base = array();
                $fields_info_base['btype'] = $btype;
                $fields_info_base['associate_id'] = $associate_id;
                $fields_info_base['associate_name'] = ($btype=="program")? $associate -> ProgramName: "";
                
                $associate_base = db_select('eddy_reviews_associate_base', 'b')
                    ->fields('b')
                    -> condition('associate_id', $associate_id, '=')
                    -> execute()->fetchAll();
                
                //delete exist info and insert new one(latest)
                if(count($associate_base) > 0){       
                    $bid = $associate_base[0]->bid;
                    db_update('eddy_reviews_associate_base') // Table name no longer needs {}
                    ->fields($fields_info_base)
                    ->condition('bid', $bid, '=')
                    ->execute();
                }else{
                    $bid = db_insert('eddy_reviews_associate_base') // Table name no longer needs {}
                        ->fields($fields_info_base)
                        ->execute();
                }

                $fields_mapping = array();
                if(!empty($associate->InstitutionId)){
                    
                    array_push($fields_mapping, array(
                        'bid' => $bid,
                        'mname' => 'institution',
                        'misid' => $associate->InstitutionId,
                        ));
                    
                }
                if(!empty($associate->ProgramTypeId)){
                    
                    array_push($fields_mapping, array(
                        'bid' => $bid,
                        'mname' => 'type',
                        'misid' => $associate->ProgramTypeId,
                        ));
                    
                }
                if(!empty($associate->ProgramLevelId)){
                    
                    array_push($fields_mapping, array(
                        'bid' => $bid,
                        'mname' => 'level',
                        'misid' => $associate->ProgramLevelId,
                        ));
                    
                }

                if(!empty($associate->CategoryList)){
                    
                    foreach($associate->CategoryList as $category){
                        array_push($fields_mapping, array(
                            'bid' => $bid,
                            'mname' =>'category', 
                            'misid' => $category->ItemId,
                            ));
                    }
                }

                if(!empty($associate->SubjectList)){
                    
                    foreach($associate->SubjectList as $subject){
                        array_push($fields_mapping, array(
                            'bid' => $bid,
                            'mname' =>'subject', 
                            'misid' => $subject->ItemId,
                            ));
                    }
                }

                if(!empty($associate->SpecialtyList)){
                    
                    foreach($associate->SpecialtyList as $specialty){
                        array_push($fields_mapping, array(
                            'bid' => $bid,
                            'mname' =>'specialty', 
                            'misid' => $specialty->ItemId,
                            ));
                    }
                }

                if(!empty($associate->ProgramAddressList)){
                    
                    foreach($associate->ProgramAddressList as $country){
                        if(isset($country->CountryId) && !empty($country->CountryId)){
                            array_push($fields_mapping, array(
                            'bid' => $bid,
                            'mname' =>'country', 
                            'misid' => $country->CountryId,
                            ));
                        }

                        if(isset($country->CityId) && !empty($country->CityId)){
                            array_push($fields_mapping, array(
                            'bid' => $bid,
                            'mname' =>'city', 
                            'misid' => $country->CityId,
                            ));
                        }
                    }
                }

                //add location(state, city) info to mapping
            }
        }else{
            //get associate as institution
        }

        if(!empty($fields_mapping)){
            db_delete('eddy_reviews_associate_mapping')
            ->condition('bid', $bid, '=')
            ->execute();

            $query_mapping = db_insert('eddy_reviews_associate_mapping')->fields(array('bid', 'mname', 'misid'));

            foreach ($fields_mapping as $record) {
                $query_mapping->values($record);
            }
            $query_mapping->execute();
            
        }
    }
    catch(Exception $e){
        dpm($e);
    }
    return $bid;
    
}


function eddy_reviews_implode_cache_key($options){
    
    $output = "";

    foreach($options as $key => $value){
        
        $output .= $key;

        $total = count($value);

        $count = 1;

        foreach($value as $k => $v){

            $output .= "_$v";

            if($count == $total){
                
                $output .= "_";

            }else{
                
                $output .= ","; 
                
            }

            $count++;

        }

    }

    return rtrim($output, '_');

}

